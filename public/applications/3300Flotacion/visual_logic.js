/* eslint-disable */

/**
 * Generated by Verge3D Puzzles v.4.1.1
 * Fri, 13 Oct 2023 21:33:34 GMT
 * Prefer not editing this file as your changes may get overridden once Puzzles are saved.
 * Check out https://www.soft8soft.com/docs/manual/en/introduction/Using-JavaScript.html
 * for the information on how to add your own JavaScript to Verge3D apps.
 */

'use strict';

(function() {

// global variables/constants used by puzzles' functions

var LIST_NONE = '<none>';

var _pGlob = {};

_pGlob.objCache = {};
_pGlob.fadeAnnotations = true;
_pGlob.pickedObject = '';
_pGlob.hoveredObject = '';
_pGlob.mediaElements = {};
_pGlob.loadedFile = '';
_pGlob.states = [];
_pGlob.percentage = 0;
_pGlob.openedFile = '';
_pGlob.openedFileMeta = {};
_pGlob.xrSessionAcquired = false;
_pGlob.xrSessionCallbacks = [];
_pGlob.screenCoords = new v3d.Vector2();
_pGlob.intervalTimers = {};
_pGlob.customEvents = new v3d.EventDispatcher();
_pGlob.eventListeners = [];

_pGlob.AXIS_X = new v3d.Vector3(1, 0, 0);
_pGlob.AXIS_Y = new v3d.Vector3(0, 1, 0);
_pGlob.AXIS_Z = new v3d.Vector3(0, 0, 1);
_pGlob.MIN_DRAG_SCALE = 10e-4;
_pGlob.SET_OBJ_ROT_EPS = 1e-8;

_pGlob.vec2Tmp = new v3d.Vector2();
_pGlob.vec2Tmp2 = new v3d.Vector2();
_pGlob.vec3Tmp = new v3d.Vector3();
_pGlob.vec3Tmp2 = new v3d.Vector3();
_pGlob.vec3Tmp3 = new v3d.Vector3();
_pGlob.vec3Tmp4 = new v3d.Vector3();
_pGlob.eulerTmp = new v3d.Euler();
_pGlob.eulerTmp2 = new v3d.Euler();
_pGlob.quatTmp = new v3d.Quaternion();
_pGlob.quatTmp2 = new v3d.Quaternion();
_pGlob.colorTmp = new v3d.Color();
_pGlob.mat4Tmp = new v3d.Matrix4();
_pGlob.planeTmp = new v3d.Plane();
_pGlob.raycasterTmp = new v3d.Raycaster(); // always check visibility

var PL = {};
// backward compatibility
if (v3d[Symbol.toStringTag] !== 'Module') {
    v3d.PL = v3d.puzzles = PL;
}

PL.procedures = PL.procedures || {};




PL.execInitPuzzles = function(options) {
    // always null, should not be available in "init" puzzles
    var appInstance = null;
    // app is more conventional than appInstance (used in exec script and app templates)
    var app = null;

    var _initGlob = {};
    _initGlob.percentage = 0;
    _initGlob.output = {
        initOptions: {
            fadeAnnotations: true,
            useBkgTransp: false,
            preserveDrawBuf: false,
            useCompAssets: false,
            useFullscreen: true,
            useCustomPreloader: false,
            preloaderStartCb: function() {},
            preloaderProgressCb: function() {},
            preloaderEndCb: function() {},
        }
    }

    // provide the container's id to puzzles that need access to the container
    _initGlob.container = options !== undefined && 'container' in options
            ? options.container : "";

    

    // utility functions envoked by the HTML puzzles
function getElements(ids, isParent) {
    var elems = [];
    if (Array.isArray(ids) && ids[0] != 'CONTAINER' && ids[0] != 'WINDOW' &&
        ids[0] != 'DOCUMENT' && ids[0] != 'BODY' && ids[0] != 'QUERYSELECTOR') {
        for (var i = 0; i < ids.length; i++)
            elems.push(getElement(ids[i], isParent));
    } else {
        elems.push(getElement(ids, isParent));
    }
    return elems;
}

function getElement(id, isParent) {
    var elem;
    if (Array.isArray(id) && id[0] == 'CONTAINER') {
        if (appInstance !== null) {
            elem = appInstance.container;
        } else if (typeof _initGlob !== 'undefined') {
            // if we are on the initialization stage, we still can have access
            // to the container element
            var id = _initGlob.container;
            if (isParent) {
                elem = parent.document.getElementById(id);
            } else {
                elem = document.getElementById(id);
            }
        }
    } else if (Array.isArray(id) && id[0] == 'WINDOW') {
        if (isParent)
            elem = parent;
        else
            elem = window;
    } else if (Array.isArray(id) && id[0] == 'DOCUMENT') {
        if (isParent)
            elem = parent.document;
        else
            elem = document;
    } else if (Array.isArray(id) && id[0] == 'BODY') {
        if (isParent)
            elem = parent.document.body;
        else
            elem = document.body;
    } else if (Array.isArray(id) && id[0] == 'QUERYSELECTOR') {
        if (isParent)
            elem = parent.document.querySelector(id);
        else
            elem = document.querySelector(id);
    } else {
        if (isParent)
            elem = parent.document.getElementById(id);
        else
            elem = document.getElementById(id);
    }
    return elem;
}

// setHTMLElemAttribute puzzle
function setHTMLElemAttribute(attr, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem) continue;

        if ((attr == 'href' || attr == 'src') && value instanceof Promise) {
            // resolve promise value for url-based attributes
            value.then(function(response) {
                elem[attr] = response;
            });
        } else {
            elem[attr] = value;
        }
    }
}

// setHTMLElemStyle puzzle
function setHTMLElemStyle(prop, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem || !elem.style)
            continue;
        elem.style[prop] = value;
    }
}



// initSettings puzzle
_initGlob.output.initOptions.fadeAnnotations = true;
_initGlob.output.initOptions.useBkgTransp = false;
_initGlob.output.initOptions.preserveDrawBuf = false;
_initGlob.output.initOptions.useCompAssets = true;
_initGlob.output.initOptions.useFullscreen = false;


// initPreloader puzzle
_initGlob.output.initOptions.useCustomPreloader = true;
_initGlob.output.initOptions.preloaderStartCb = function() {
    _initGlob.percentage = 0;
    (function() {})();
};
_initGlob.output.initOptions.preloaderProgressCb = function(percentage) {
    _initGlob.percentage = percentage;
    (function() {
  setHTMLElemAttribute('innerHTML', String(Math.round(_initGlob.percentage)) + '%', 'loading_percentage', true);
})();
};
_initGlob.output.initOptions.preloaderEndCb = function() {
    _initGlob.percentage = 100;
    (function() {
  setHTMLElemStyle('display', 'none', 'preloader_screen', true);
  setHTMLElemStyle('display', 'none', 'controles-container', true);
  setHTMLElemStyle('display', 'none', 'go-home', true);
  setHTMLElemStyle('display', 'none', 'go-area', true);
  setHTMLElemStyle('display', 'none', 'cam-muestreador-metalurgico-alimentacion', true);
  setHTMLElemStyle('display', 'none', 'cam-celdas-rougher', true);
  setHTMLElemStyle('display', 'none', 'cam-bombas-alimentacion', true);
  setHTMLElemStyle('display', 'none', 'cam-segunda-limpieza-cobre', true);
  setHTMLElemStyle('display', 'none', 'cam-muestreador-metalurgico-concentrado-cu-mo', true);
  setHTMLElemStyle('display', 'none', 'cam-nido-hidrociclones', true);
  setHTMLElemStyle('display', 'none', 'logo-img', true);
  setHTMLElemStyle('display', 'flex', 'btn_empezar_recorrido_4', true);
  setHTMLElemStyle('display', 'none', 'btn_empezar_recorrido_1', true);
  setHTMLElemStyle('display', 'none', 'btn_empezar_recorrido_2', true);
  setHTMLElemStyle('display', 'none', 'btn_empezar_recorrido_3', true);
  setHTMLElemStyle('display', 'none', 'btn_empezar_recorrido_0', true);
  setHTMLElemStyle('display', 'none', 'btn_empezar_recorrido_5', true);
  setHTMLElemStyle('display', 'none', 'btn_empezar_recorrido_6', true);
})();
};

    return _initGlob.output;
}

PL.init = function(appInstance, initOptions) {

// app is more conventional than appInstance (used in exec script and app templates)
var app = appInstance;

initOptions = initOptions || {};

if ('fadeAnnotations' in initOptions) {
    _pGlob.fadeAnnotations = initOptions.fadeAnnotations;
}

this.procedures["ocultar-controles-botones"] = ocultar_controles_botones;
this.procedures["mostrar-controles-botones"] = mostrar_controles_botones;
this.procedures["ocultarSubAreas"] = ocultarSubAreas;
this.procedures["setUserPosition"] = setUserPosition;
this.procedures["goBack"] = goBack;
this.procedures["mostrarSubAreas"] = mostrarSubAreas;
this.procedures["deshabilitar-boton-retornar"] = deshabilitar_boton_retornar;
this.procedures["ocultar-objetos-riesgos-all"] = ocultar_objetos_riesgos_all;
this.procedures["habilitar-boton-retornar"] = habilitar_boton_retornar;
this.procedures["setInformacion"] = setInformacion;

var active_cam, cam_id, operador, objeto_riesgo_mostrar, equipos_3900, information_id, getParameter, equipos_3500, i, equipos_3300, operadores_visibles;

// featureAvailable puzzle
function featureAvailable(feature) {

    var userAgent = window.navigator.userAgent;
    var platform = window.navigator.platform;

    switch (feature) {
    case 'LINUX':
        return /Linux/.test(platform);
    case 'WINDOWS':
        return ['Win32', 'Win64', 'Windows', 'WinCE'].indexOf(platform) !== -1;
    case 'MACOS':
        return (['Macintosh', 'MacIntel', 'MacPPC', 'Mac68K'].indexOf(platform) !== -1 && !v3d.Detector.checkIOS());
    case 'IOS':
        return v3d.Detector.checkIOS();
    case 'ANDROID':
        return /Android/i.test(userAgent);
    case 'MOBILE':
        return (/Android|webOS|BlackBerry/i.test(userAgent) || v3d.Detector.checkIOS());

    case 'CHROME':
        // Chromium based
        return (!!window.chrome && !/Edge/.test(navigator.userAgent));
    case 'FIREFOX':
        return /Firefox/.test(navigator.userAgent);
    case 'IE':
        return /Trident/.test(navigator.userAgent);
    case 'EDGE':
        return /Edge/.test(navigator.userAgent);
    case 'SAFARI':
        return (/Safari/.test(navigator.userAgent) && !/Chrome/.test(navigator.userAgent));

    case 'TOUCH':
        return !!(('ontouchstart' in window) || window.DocumentTouch && document instanceof DocumentTouch);
    case 'RETINA':
        return window.devicePixelRatio >= 2;
    case 'HDR':
        return appInstance.useHDR;
    case 'WEBAUDIO':
        return v3d.Detector.checkWebAudio();
    case 'WEBGL':
        var canvas = document.createElement('canvas');
        var gl = canvas.getContext('webgl')
        return !!gl;
    case 'WEBGL2':
        var canvas = document.createElement('canvas');
        var gl = canvas.getContext('webgl2')
        return !!gl;
    case 'WOOCOMMERCE':
        var woo_fun = window.parent.v3d_woo_get_product_info || window.parent.parent.v3d_woo_get_product_info;
        return !!woo_fun;
    case 'DO_NOT_TRACK':
        if (navigator.doNotTrack == '1' || window.doNotTrack == '1')
            return true;
        else
            return false;
    default:
        return false;
    }

}

// utility functions envoked by the HTML puzzles
function getElements(ids, isParent) {
    var elems = [];
    if (Array.isArray(ids) && ids[0] != 'CONTAINER' && ids[0] != 'WINDOW' &&
        ids[0] != 'DOCUMENT' && ids[0] != 'BODY' && ids[0] != 'QUERYSELECTOR') {
        for (var i = 0; i < ids.length; i++)
            elems.push(getElement(ids[i], isParent));
    } else {
        elems.push(getElement(ids, isParent));
    }
    return elems;
}

function getElement(id, isParent) {
    var elem;
    if (Array.isArray(id) && id[0] == 'CONTAINER') {
        if (appInstance !== null) {
            elem = appInstance.container;
        } else if (typeof _initGlob !== 'undefined') {
            // if we are on the initialization stage, we still can have access
            // to the container element
            var id = _initGlob.container;
            if (isParent) {
                elem = parent.document.getElementById(id);
            } else {
                elem = document.getElementById(id);
            }
        }
    } else if (Array.isArray(id) && id[0] == 'WINDOW') {
        if (isParent)
            elem = parent;
        else
            elem = window;
    } else if (Array.isArray(id) && id[0] == 'DOCUMENT') {
        if (isParent)
            elem = parent.document;
        else
            elem = document;
    } else if (Array.isArray(id) && id[0] == 'BODY') {
        if (isParent)
            elem = parent.document.body;
        else
            elem = document.body;
    } else if (Array.isArray(id) && id[0] == 'QUERYSELECTOR') {
        if (isParent)
            elem = parent.document.querySelector(id);
        else
            elem = document.querySelector(id);
    } else {
        if (isParent)
            elem = parent.document.getElementById(id);
        else
            elem = document.getElementById(id);
    }
    return elem;
}

// setHTMLElemStyle puzzle
function setHTMLElemStyle(prop, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem || !elem.style)
            continue;
        elem.style[prop] = value;
    }
}

function _checkListenersSame(target0, type0, listener0, optionsOrUseCapture0,
        target1, type1, listener1, optionsOrUseCapture1) {
    const capture0 = Boolean(optionsOrUseCapture0 instanceof Object
            ? optionsOrUseCapture0.capture : optionsOrUseCapture0);
    const capture1 = Boolean(optionsOrUseCapture1 instanceof Object
            ? optionsOrUseCapture1.capture : optionsOrUseCapture1);
    return target0 === target1 && type0 === type1 && listener0 === listener1
            && capture0 === capture1;
}

/**
 * Add the specified event listener to the specified target. This function also
 * stores listener data for easier disposing.
 */
function bindListener(target, type, listener, optionsOrUseCapture) {
    const alreadyExists = _pGlob.eventListeners.some(elem => {
        return _checkListenersSame(elem.target, elem.type, elem.listener,
                elem.optionsOrUseCapture, target, type, listener,
                optionsOrUseCapture);
    });

    if (!alreadyExists) {
        target.addEventListener(type, listener, optionsOrUseCapture);
        _pGlob.eventListeners.push({ target, type, listener, optionsOrUseCapture });
    }
}

// eventHTMLElem puzzle
function eventHTMLElem(eventType, ids, isParent, callback) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem)
            continue;

        bindListener(elem, eventType, callback);
    }
}

// utility function envoked by almost all V3D-specific puzzles
// filter off some non-mesh types
function notIgnoredObj(obj) {
    return obj.type !== 'AmbientLight' &&
           obj.name !== '' &&
           !(obj.isMesh && obj.isMaterialGeneratedMesh) &&
           !obj.isAuxClippingMesh;
}


// utility function envoked by almost all V3D-specific puzzles
// find first occurence of the object by its name
function getObjectByName(objName) {
    var objFound;
    var runTime = _pGlob !== undefined;
    objFound = runTime ? _pGlob.objCache[objName] : null;

    if (objFound && objFound.name === objName)
        return objFound;

    if (appInstance.scene) {
        appInstance.scene.traverse(function(obj) {
            if (!objFound && notIgnoredObj(obj) && (obj.name == objName)) {
                objFound = obj;
                if (runTime) {
                    _pGlob.objCache[objName] = objFound;
                }
            }
        });
    }
    return objFound;
}


// utility function envoked by almost all V3D-specific puzzles
// retrieve all objects on the scene
function getAllObjectNames() {
    var objNameList = [];
    appInstance.scene.traverse(function(obj) {
        if (notIgnoredObj(obj))
            objNameList.push(obj.name)
    });
    return objNameList;
}


// utility function envoked by almost all V3D-specific puzzles
// retrieve all objects which belong to the group
function getObjectNamesByGroupName(targetGroupName) {
    var objNameList = [];
    appInstance.scene.traverse(function(obj){
        if (notIgnoredObj(obj)) {
            var groupNames = obj.groupNames;
            if (!groupNames)
                return;
            for (var i = 0; i < groupNames.length; i++) {
                var groupName = groupNames[i];
                if (groupName == targetGroupName) {
                    objNameList.push(obj.name);
                }
            }
        }
    });
    return objNameList;
}


// utility function envoked by almost all V3D-specific puzzles
// process object input, which can be either single obj or array of objects, or a group
function retrieveObjectNames(objNames) {
    var acc = [];
    retrieveObjectNamesAcc(objNames, acc);
    return acc.filter(function(name) {
        return name;
    });
}

function retrieveObjectNamesAcc(currObjNames, acc) {
    if (typeof currObjNames == "string") {
        acc.push(currObjNames);
    } else if (Array.isArray(currObjNames) && currObjNames[0] == "GROUP") {
        var newObj = getObjectNamesByGroupName(currObjNames[1]);
        for (var i = 0; i < newObj.length; i++)
            acc.push(newObj[i]);
    } else if (Array.isArray(currObjNames) && currObjNames[0] == "ALL_OBJECTS") {
        var newObj = getAllObjectNames();
        for (var i = 0; i < newObj.length; i++)
            acc.push(newObj[i]);
    } else if (Array.isArray(currObjNames)) {
        for (var i = 0; i < currObjNames.length; i++)
            retrieveObjectNamesAcc(currObjNames[i], acc);
    }
}

// utility function used by the whenClicked, whenHovered and whenDraggedOver puzzles
function initObjectPicking(callback, eventType, mouseDownUseTouchStart, mouseButtons) {

    var elem = appInstance.renderer.domElement;
    bindListener(elem, eventType, pickListener);

    if (eventType == 'mousedown') {

        var touchEventName = mouseDownUseTouchStart ? 'touchstart' : 'touchend';
        bindListener(elem, touchEventName, pickListener);

    } else if (eventType == 'dblclick') {

        var prevTapTime = 0;

        function doubleTapCallback(event) {

            var now = new Date().getTime();
            var timesince = now - prevTapTime;

            if (timesince < 600 && timesince > 0) {

                pickListener(event);
                prevTapTime = 0;
                return;

            }

            prevTapTime = new Date().getTime();
        }

        var touchEventName = mouseDownUseTouchStart ? 'touchstart' : 'touchend';
        bindListener(elem, touchEventName, doubleTapCallback);
    }

    var raycaster = new v3d.Raycaster();

    function pickListener(event) {

        // to handle unload in loadScene puzzle
        if (!appInstance.getCamera())
            return;

        event.preventDefault();

        var xNorm = 0, yNorm = 0;
        if (event instanceof MouseEvent) {
            if (mouseButtons && mouseButtons.indexOf(event.button) == -1)
                return;
            xNorm = event.offsetX / elem.clientWidth;
            yNorm = event.offsetY / elem.clientHeight;
        } else if (event instanceof TouchEvent) {
            var rect = elem.getBoundingClientRect();
            xNorm = (event.changedTouches[0].clientX - rect.left) / rect.width;
            yNorm = (event.changedTouches[0].clientY - rect.top) / rect.height;
        }

        _pGlob.screenCoords.x = xNorm * 2 - 1;
        _pGlob.screenCoords.y = -yNorm * 2 + 1;
        raycaster.setFromCamera(_pGlob.screenCoords, appInstance.getCamera(true));
        var objList = [];
        appInstance.scene.traverse(function(obj){objList.push(obj);});
        var intersects = raycaster.intersectObjects(objList, false);
        callback(intersects, event);
    }
}

function objectsIncludeObj(objNames, testedObjName) {
    if (!testedObjName) return false;

    for (var i = 0; i < objNames.length; i++) {
        if (testedObjName == objNames[i]) {
            return true;
        } else {
            // also check children which are auto-generated for multi-material objects
            var obj = getObjectByName(objNames[i]);
            if (obj && obj.type == "Group") {
                for (var j = 0; j < obj.children.length; j++) {
                    if (testedObjName == obj.children[j].name) {
                        return true;
                    }
                }
            }
        }
    }
    return false;
}

// utility function used by the whenClicked, whenHovered, whenDraggedOver, and raycast puzzles
function getPickedObjectName(obj) {
    // auto-generated from a multi-material object, use parent name instead
    if (obj.isMesh && obj.isMaterialGeneratedMesh && obj.parent) {
        return obj.parent.name;
    } else {
        return obj.name;
    }
}

// whenClicked puzzle
function registerOnClick(objSelector, xRay, doubleClick, mouseButtons, cbDo, cbIfMissedDo) {

    // for AR/VR
    _pGlob.objClickInfo = _pGlob.objClickInfo || [];

    _pGlob.objClickInfo.push({
        objSelector: objSelector,
        callbacks: [cbDo, cbIfMissedDo]
    });

    initObjectPicking(function(intersects, event) {

        var isPicked = false;

        var maxIntersects = xRay ? intersects.length : Math.min(1, intersects.length);

        for (var i = 0; i < maxIntersects; i++) {
            var obj = intersects[i].object;
            var objName = getPickedObjectName(obj);
            var objNames = retrieveObjectNames(objSelector);

            if (objectsIncludeObj(objNames, objName)) {
                // save the object for the pickedObject block
                _pGlob.pickedObject = objName;
                isPicked = true;
                cbDo(event);
            }
        }

        if (!isPicked) {
            _pGlob.pickedObject = '';
            cbIfMissedDo(event);
        }

    }, doubleClick ? 'dblclick' : 'mousedown', false, mouseButtons);
}

// getHTMLElemAttribute puzzle
function getHTMLElemAttribute(attr, id, isParent) {
    var elem = getElement(id, isParent);
    return elem ? elem[attr]: '';
}

function MediaHTML5(isVideo) {
    this.source = null;
}

Object.assign(MediaHTML5.prototype, {

    load: function(url, isVideo) {
        if (isVideo) {
            this.source = document.createElement('video');
            this.source.playsInline = true;
            this.source.preload = 'auto';
            this.source.autoload = true;
            this.source.crossOrigin = 'anonymous';
        } else {
            this.source = document.createElement('audio');
        }

        this.source.src = url;
        return this;
    },

    play: function() {
        this.source.play();
    },

    pause: function() {
        this.source.pause();
    },

    stop: function() {
        this.source.pause();
        this.source.currentTime = 0;
    },

    rewind: function() {
        this.source.currentTime = 0;
    },

    setPlaybackTime: function(time) {
        this.source.currentTime = time
    },

    getPlaybackTime: function() {
        return this.source.currentTime;
    },

    getDuration: function() {
        return this.source.duration;
    },

    setPlaybackRate: function(rate) {
        this.source.playbackRate = rate;
    },

    isPlaying: function() {
        return this.source.duration > 0 && !this.source.paused;
    },

    setLoop: function(looped) {
        this.source.loop = looped;
    },

    setVolume: function(volume) {
        this.source.volume = volume;
    },

    setMuted: function(muted) {
        this.source.muted = muted;
    },

});

// loadMedia puzzle
function loadMedia_HTML5(url) {

    var elems = _pGlob.mediaElements;
    if (!(url in elems)) {
        elems[url] = new MediaHTML5().load(url);
    }
    return elems[url];
}

// soundVideoMute puzzle
function soundVideoMute(mediaElem) {
    const mediaElems = (Array.isArray(mediaElem) ? mediaElem : [mediaElem]).filter(elem => elem);
    mediaElems.forEach(mediaElem => {
        mediaElem.setMuted(true);
    });
}

// soundVideoUnmute puzzle
function soundVideoUnmute(mediaElem) {
    const mediaElems = (Array.isArray(mediaElem) ? mediaElem : [mediaElem]).filter(elem => elem);
    mediaElems.forEach(mediaElem => {
        mediaElem.setMuted(false);
    });
}

// playSound puzzle
function playSound(mediaElem, loop) {
    const mediaElems = (Array.isArray(mediaElem) ? mediaElem : [mediaElem]).filter(elem => elem);
    mediaElems.forEach(mediaElem => {
        mediaElem.setLoop(loop);
        mediaElem.play();
    });
}

/**
 * Retrieve coordinate system from the loaded scene
 */
function getCoordSystem() {
    var scene = appInstance.scene;

    if (scene && 'coordSystem' in scene.userData) {
        return scene.userData.coordSystem;
    }

    return 'Y_UP_RIGHT';
}


/**
 * Transform coordinates from one space to another
 * Can be used with Vector3 or Euler.
 */
function coordsTransform(coords, from, to, noSignChange) {

    if (from == to)
        return coords;

    var y = coords.y, z = coords.z;

    if (from == 'Z_UP_RIGHT' && to == 'Y_UP_RIGHT') {
        coords.y = z;
        coords.z = noSignChange ? y : -y;
    } else if (from == 'Y_UP_RIGHT' && to == 'Z_UP_RIGHT') {
        coords.y = noSignChange ? z : -z;
        coords.z = y;
    } else {
        console.error('coordsTransform: Unsupported coordinate space');
    }

    return coords;
}


/**
 * Verge3D euler rotation to Blender/Max shortest.
 * 1) Convert from intrinsic rotation (v3d) to extrinsic XYZ (Blender/Max default
 *    order) via reversion: XYZ -> ZYX
 * 2) swizzle ZYX->YZX
 * 3) choose the shortest rotation to resemble Blender's behavior
 */
const eulerV3DToBlenderShortest = function() {

    const eulerTmp = new v3d.Euler();
    const eulerTmp2 = new v3d.Euler();
    const vec3Tmp = new v3d.Vector3();

    return function(euler, dest) {

        const eulerBlender = eulerTmp.copy(euler).reorder('YZX');
        const eulerBlenderAlt = eulerTmp2.copy(eulerBlender).makeAlternative();

        const len = vec3Tmp.setFromEuler(eulerBlender).lengthSq();
        const lenAlt = vec3Tmp.setFromEuler(eulerBlenderAlt).lengthSq();

        dest.copy(len < lenAlt ? eulerBlender : eulerBlenderAlt);
        return coordsTransform(dest, 'Y_UP_RIGHT', 'Z_UP_RIGHT');
    }

}();

// tweenCamera puzzle
function tweenCamera(posOrObj, targetOrObj, duration, doSlot, movementType) {
    var camera = appInstance.getCamera();

    if (Array.isArray(posOrObj)) {
        var worldPos = _pGlob.vec3Tmp.fromArray(posOrObj);
        worldPos = coordsTransform(worldPos, getCoordSystem(), 'Y_UP_RIGHT');
    } else if (posOrObj) {
        var posObj = getObjectByName(posOrObj);
        if (!posObj) return;
        var worldPos = posObj.getWorldPosition(_pGlob.vec3Tmp);
    } else {
        // empty input means: don't change the position
        var worldPos = camera.getWorldPosition(_pGlob.vec3Tmp);
    }

    if (Array.isArray(targetOrObj)) {
        var worldTarget = _pGlob.vec3Tmp2.fromArray(targetOrObj);
        worldTarget = coordsTransform(worldTarget, getCoordSystem(), 'Y_UP_RIGHT');
    } else {
        var targObj = getObjectByName(targetOrObj);
        if (!targObj) return;
        var worldTarget = targObj.getWorldPosition(_pGlob.vec3Tmp2);
    }

    duration = Math.max(0, duration);

    if (appInstance.controls && appInstance.controls.tween) {
        // orbit and flying cameras
        if (!appInstance.controls.inTween) {
            appInstance.controls.tween(worldPos, worldTarget, duration, doSlot,
                    movementType);
        }
    } else {
        // TODO: static camera, just position it for now
        if (camera.parent) {
            camera.parent.worldToLocal(worldPos);
        }
        camera.position.copy(worldPos);
        camera.lookAt(worldTarget);
        doSlot();
    }
}

// setTimer puzzle
function registerSetTimer(id, timeout, callback, repeat) {

    if (id in _pGlob.intervalTimers) {
        window.clearInterval(_pGlob.intervalTimers[id]);
    }

    _pGlob.intervalTimers[id] = window.setInterval(function() {
        if (repeat-- > 0) {
            callback(_pGlob.intervalTimers[id]);
        }
    }, 1000 * timeout);
}

// Describe this function...
function ocultar_controles_botones() {
  setHTMLElemStyle('display', 'none', 'controles-container', true);
  setHTMLElemStyle('display', 'none', 'go-home', true);
  setHTMLElemStyle('display', 'none', 'go-area', true);
}

// Describe this function...
function mostrar_controles_botones() {
  setHTMLElemStyle('display', 'flex', 'controles-container', true);
  setHTMLElemStyle('display', 'flex', 'go-home', true);
  setHTMLElemStyle('display', 'flex', 'go-area', true);
}

// whenHovered puzzle
initObjectPicking(function(intersects, event) {

    var prevHovered = _pGlob.hoveredObject;
    var currHovered = '';

    // the event might happen before hover registration
    _pGlob.objHoverInfo = _pGlob.objHoverInfo || [];

    // search for closest hovered object

    var lastIntersectIndex = Infinity;
    _pGlob.objHoverInfo.forEach(function(el) {
        var maxIntersects = el.xRay ? intersects.length : Math.min(1, intersects.length);

        for (var i = 0; i < maxIntersects; i++) {
            var obj = intersects[i].object;
            var objName = getPickedObjectName(obj);

            if (objectsIncludeObj(retrieveObjectNames(el.objSelector), objName) && i <= lastIntersectIndex) {
                currHovered = objName;
                lastIntersectIndex = i;
            }
        }
    });

    if (prevHovered == currHovered) return;

    // first - all "out" callbacks, then - all "over"
    _pGlob.objHoverInfo.forEach(function(el) {
        if (objectsIncludeObj(retrieveObjectNames(el.objSelector), prevHovered)) {
            // ensure the correct value of the hoveredObject block
            _pGlob.hoveredObject = prevHovered;
            el.callbacks[1](event);
        }
    });

    _pGlob.objHoverInfo.forEach(function(el) {
        if (objectsIncludeObj(retrieveObjectNames(el.objSelector), currHovered)) {
            // ensure the correct value of the hoveredObject block
            _pGlob.hoveredObject = currHovered;
            el.callbacks[0](event);
        }
    });

    _pGlob.hoveredObject = currHovered;
}, 'mousemove', false);

// whenHovered puzzle
function registerOnHover(objSelector, xRay, cbOver, cbOut) {

    _pGlob.objHoverInfo = _pGlob.objHoverInfo || [];

    _pGlob.objHoverInfo.push({
        objSelector: objSelector,
        callbacks: [cbOver, cbOut],
        xRay: xRay
    });
}

// setActiveCamera puzzle
function setActiveCamera(camName) {
    var camera = getObjectByName(camName);
    if (!camera || !camera.isCamera || appInstance.getCamera() == camera)
        return;
    appInstance.setCamera(camera);
}

// setTimeout puzzle
function registerSetTimeout(timeout, callback) {
    window.setTimeout(callback, 1000 * timeout);
}

// Describe this function...
function ocultarSubAreas() {
  registerSetTimeout(0.0001, function() {
    setHTMLElemStyle('display', 'none', 'controles-container', true);
    setHTMLElemStyle('display', 'none', 'go-home', true);
    setHTMLElemStyle('display', 'none', 'go-area', true);
    setHTMLElemStyle('display', 'none', 'cam-muestreador-metalurgico-alimentacion', true);
    setHTMLElemStyle('display', 'none', 'cam-celdas-rougher', true);
    setHTMLElemStyle('display', 'none', 'cam-bombas-alimentacion', true);
    setHTMLElemStyle('display', 'none', 'cam-segunda-limpieza-cobre', true);
    setHTMLElemStyle('display', 'none', 'cam-muestreador-metalurgico-concentrado-cu-mo', true);
    setHTMLElemStyle('display', 'none', 'cam-nido-hidrociclones', true);
  });
}

// setHTMLElemAttribute puzzle
function setHTMLElemAttribute(attr, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem) continue;

        if ((attr == 'href' || attr == 'src') && value instanceof Promise) {
            // resolve promise value for url-based attributes
            value.then(function(response) {
                elem[attr] = response;
            });
        } else {
            elem[attr] = value;
        }
    }
}

// callJSFunction puzzle
function getJSFunction(funcName) {
    var jsFunc = appInstance.ExternalInterface[funcName];
    if (typeof jsFunc == "function")
        return jsFunc;
    else
        return function() {};
}

// show and hide puzzles
function changeVis(objSelector, bool) {
    var objNames = retrieveObjectNames(objSelector);

    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i]
        if (!objName)
            continue;
        var obj = getObjectByName(objName);
        if (!obj)
            continue;
        obj.visible = bool;
        obj.resolveMultiMaterial().forEach(function(objR) {
            objR.visible = bool;
        });
    }
}

// Describe this function...
function setUserPosition(active_cam, cam_id, operador, objeto_riesgo_mostrar) {
  tweenCamera(operador, active_cam, 2, function() {
    if (cam_id != false) {
      setHTMLElemAttribute('value', cam_id, 'estado_equipo', true);
      getJSFunction('emitirEstadoEquipo')();
    }
    changeVis(operador, false);
    changeVis(objeto_riesgo_mostrar, true);
    habilitar_boton_retornar();
  }, 1);
}

// Describe this function...
function goBack() {
  setActiveCamera('camara_paneo');
  tweenCamera('ref_camara_paneo', 'Celdas_Componentes418', 2, function() {
    deshabilitar_boton_retornar();
  }, 1);
}

// Describe this function...
function mostrarSubAreas() {
  setHTMLElemStyle('display', 'flex', 'controles-container', true);
  setHTMLElemStyle('display', 'flex', 'go-home', true);
  setHTMLElemStyle('display', 'flex', 'go-area', true);
  setHTMLElemStyle('display', 'flex', 'cam-muestreador-metalurgico-alimentacion', true);
  setHTMLElemStyle('display', 'flex', 'cam-celdas-rougher', true);
  setHTMLElemStyle('display', 'flex', 'cam-bombas-alimentacion', true);
  setHTMLElemStyle('display', 'flex', 'cam-segunda-limpieza-cobre', true);
  setHTMLElemStyle('display', 'flex', 'cam-muestreador-metalurgico-concentrado-cu-mo', true);
  setHTMLElemStyle('display', 'flex', 'cam-nido-hidrociclones', true);
}

// Describe this function...
function deshabilitar_boton_retornar() {
  setHTMLElemAttribute('style', 'pointer-events:none;opacity:0.5;', 'go-area', true);
}

// Describe this function...
function ocultar_objetos_riesgos_all() {
  changeVis('Icono001.002', false);
  changeVis('Icono001.001', false);
  changeVis('Icono001.006', false);
  changeVis('Icono001.003', false);
  changeVis('Icono001.004', false);
}

// Describe this function...
function habilitar_boton_retornar() {
  setHTMLElemAttribute('style', 'pointer-events:initial;opacity:1;', 'go-area', true);
}

// Describe this function...
function setInformacion(information_id) {
  setHTMLElemAttribute('value', information_id, 'estado_animacion', true);
  getJSFunction('emitirEstadoAnimacion')();
}

// getUrlData puzzle
function getUrlData(kind, isParent) {

    var targetWindow = isParent ? window.parent : window;
    switch (kind) {
    case 'URL':
        return targetWindow.location.href;
    case 'PARAMS':
        return v3d.AppUtils.getPageParams(targetWindow);
    case 'HOSTNAME':
        return targetWindow.location.hostname;
    default:
        console.error('getUrlData: option does not exists.');
        return '';
    }

}


if (featureAvailable('MOBILE') == true) {
  setHTMLElemStyle('display', 'flex', 'instruccionesmovil-button', false);
  eventHTMLElem('click', 'instruccionesmovil-button', false, function(event) {
    setHTMLElemStyle('display', 'flex', 'intrucciones-movil', false);
  });
  registerOnClick('Icono001.002', false, false, [0,1,2], function() {
    setHTMLElemStyle('display', 'flex', 'riesgo_1_mobile', false);
    ocultar_controles_botones();
  }, function() {});
  eventHTMLElem('click', 'riesgo_1_cerrar_mobile', false, function(event) {
    setHTMLElemStyle('display', 'none', 'riesgo_1_mobile', false);
    mostrar_controles_botones();
  });
  registerOnClick('Icono001.001', false, false, [0,1,2], function() {
    setHTMLElemStyle('display', 'flex', 'riesgo_2_mobile', false);
    ocultar_controles_botones();
  }, function() {});
  eventHTMLElem('click', 'riesgo_2_cerrar_mobile', false, function(event) {
    setHTMLElemStyle('display', 'none', 'riesgo_2_mobile', false);
    mostrar_controles_botones();
  });
  registerOnClick('Icono001.006', false, false, [0,1,2], function() {
    setHTMLElemStyle('display', 'flex', 'riesgo_3_mobile', false);
    ocultar_controles_botones();
  }, function() {});
  eventHTMLElem('click', 'riesgo_3_cerrar_mobile', false, function(event) {
    setHTMLElemStyle('display', 'none', 'riesgo_3_mobile', false);
    mostrar_controles_botones();
  });
  registerOnClick('Icono001.003', false, false, [0,1,2], function() {
    setHTMLElemStyle('display', 'flex', 'riesgo_4_mobile', false);
    ocultar_controles_botones();
  }, function() {});
  eventHTMLElem('click', 'riesgo_4_cerrar_mobile', false, function(event) {
    setHTMLElemStyle('display', 'none', 'riesgo_4_mobile', false);
    mostrar_controles_botones();
  });
  registerOnClick('Icono001.004', false, false, [0,1,2], function() {
    setHTMLElemStyle('display', 'flex', 'riesgo_5_mobile', false);
    ocultar_controles_botones();
  }, function() {});
  eventHTMLElem('click', 'riesgo_5_cerrar_mobile', false, function(event) {
    setHTMLElemStyle('display', 'none', 'riesgo_5_mobile', false);
    mostrar_controles_botones();
  });
  if (getHTMLElemAttribute('offsetHeight', 'v3d-container', false) / getHTMLElemAttribute('offsetWidth', 'v3d-container', false) < 1) {
    setHTMLElemStyle('display', 'none', 'horizontalContainer', true);
  } else if (getHTMLElemAttribute('offsetHeight', 'v3d-container', false) / getHTMLElemAttribute('offsetWidth', 'v3d-container', false) >= 1) {
    setHTMLElemStyle('display', 'flex', 'horizontalContainer', true);
  }
} else {
  setHTMLElemStyle('display', 'flex', 'instrucciones-button', false);
  eventHTMLElem('click', 'instrucciones-button', false, function(event) {
    setHTMLElemStyle('display', 'flex', 'intrucciones-container', false);
  });
  setHTMLElemStyle('display', 'none', 'horizontalContainer', true);
  registerOnClick('Icono001.002', false, false, [0,1,2], function() {
    setHTMLElemStyle('display', 'flex', 'riesgo_1', false);
    ocultar_controles_botones();
  }, function() {});
  eventHTMLElem('click', 'riesgo_1_cerrar', false, function(event) {
    setHTMLElemStyle('display', 'none', 'riesgo_1', false);
    mostrar_controles_botones();
  });
  registerOnClick('Icono001.001', false, false, [0,1,2], function() {
    setHTMLElemStyle('display', 'flex', 'riesgo_2', false);
    ocultar_controles_botones();
  }, function() {});
  eventHTMLElem('click', 'riesgo_2_cerrar', false, function(event) {
    setHTMLElemStyle('display', 'none', 'riesgo_2', false);
    mostrar_controles_botones();
  });
  registerOnClick('Icono001.006', false, false, [0,1,2], function() {
    setHTMLElemStyle('display', 'flex', 'riesgo_3', false);
    ocultar_controles_botones();
  }, function() {});
  eventHTMLElem('click', 'riesgo_3_cerrar', false, function(event) {
    setHTMLElemStyle('display', 'none', 'riesgo_3', false);
    mostrar_controles_botones();
  });
  registerOnClick('Icono001.003', false, false, [0,1,2], function() {
    setHTMLElemStyle('display', 'flex', 'riesgo_4', false);
    ocultar_controles_botones();
  }, function() {});
  eventHTMLElem('click', 'riesgo_4_cerrar', false, function(event) {
    setHTMLElemStyle('display', 'none', 'riesgo_4', false);
    mostrar_controles_botones();
  });
  registerOnClick('Icono001.004', false, false, [0,1,2], function() {
    setHTMLElemStyle('display', 'flex', 'riesgo_5', false);
    ocultar_controles_botones();
  }, function() {});
  eventHTMLElem('click', 'riesgo_5_cerrar', false, function(event) {
    setHTMLElemStyle('display', 'none', 'riesgo_5', false);
    mostrar_controles_botones();
  });
}

eventHTMLElem('click', 'btn_mute_audio', false, function(event) {
  setHTMLElemStyle('display', 'none', 'btn_mute_audio', false);
  setHTMLElemStyle('display', 'flex', 'btn_unmute_audio', false);
  soundVideoMute(loadMedia_HTML5('../audios/area-3300.mp3'));
  soundVideoMute(loadMedia_HTML5('../audios/area-3300-2.mp3'));
});
eventHTMLElem('click', 'btn_unmute_audio', false, function(event) {
  setHTMLElemStyle('display', 'none', 'btn_unmute_audio', false);
  setHTMLElemStyle('display', 'flex', 'btn_mute_audio', false);
  soundVideoUnmute(loadMedia_HTML5('../audios/area-3300.mp3'));
  soundVideoUnmute(loadMedia_HTML5('../audios/area-3300-2.mp3'));
});
eventHTMLElem('click', 'btn_empezar_recorrido_4', true, function(event) {
  soundVideoUnmute(loadMedia_HTML5('../audios/area-3300.mp3'));
  soundVideoUnmute(loadMedia_HTML5('../audios/area-3300-2.mp3'));
  setHTMLElemStyle('display', 'none', 'btn_empezar_recorrido_4', true);
  setHTMLElemStyle('display', 'flex', 'btn_mute_audio', false);
  setHTMLElemStyle('display', 'flex', 'invisibleContainer', false);
  registerSetTimer('myTimer', 1, function() {
    setHTMLElemStyle('display', 'flex', 'invisibleContainer', false);
    playSound(loadMedia_HTML5('../audios/area-3300.mp3'), false);
    registerSetTimer('myTimer2', 3, function() {
      tweenCamera('Camara001', 'CamaraDireccion001', 3, function() {}, 0);
      registerSetTimer('myTimer4', 6, function() {
        tweenCamera('Camara002', 'CamaraDireccion002', 2.5, function() {}, 0);
        registerSetTimer('myTimer5', 3, function() {
          tweenCamera('Camara003', 'CamaraDireccion003', 2, function() {}, 0);
          registerSetTimer('myTimer6', 3, function() {
            tweenCamera('Camara002', 'CamaraDireccion002', 4, function() {
              tweenCamera('Camara004', 'CamaraDireccion004', 4, function() {}, 0);
            }, 0);
          }, 1);
        }, 1);
      }, 1);
    }, 1);
    registerSetTimer('myTimer3', 28, function() {
      mostrarSubAreas();
      setHTMLElemStyle('display', 'none', 'invisibleContainer', false);
      setHTMLElemStyle('display', 'none', 'btn_mute_audio', false);
      setHTMLElemStyle('display', 'none', 'btn_unmute_audio', false);
      deshabilitar_boton_retornar();
    }, 1);
  }, 1);
});

registerOnHover('Icono001.002', false, function() {
  setHTMLElemStyle('cursor', 'pointer', ['BODY'], false);
}, function() {
  setHTMLElemStyle('cursor', 'auto', ['BODY'], false);
});
registerOnHover('Icono001.001', false, function() {
  setHTMLElemStyle('cursor', 'pointer', ['BODY'], false);
}, function() {
  setHTMLElemStyle('cursor', 'auto', ['BODY'], false);
});
registerOnHover('Icono001.006', false, function() {
  setHTMLElemStyle('cursor', 'pointer', ['BODY'], false);
}, function() {
  setHTMLElemStyle('cursor', 'auto', ['BODY'], false);
});
registerOnHover('Icono001.003', false, function() {
  setHTMLElemStyle('cursor', 'pointer', ['BODY'], false);
}, function() {
  setHTMLElemStyle('cursor', 'auto', ['BODY'], false);
});
registerOnHover('Icono001.004', false, function() {
  setHTMLElemStyle('cursor', 'pointer', ['BODY'], false);
}, function() {
  setHTMLElemStyle('cursor', 'auto', ['BODY'], false);
});

ocultar_objetos_riesgos_all();
setActiveCamera('camara_paneo');
ocultarSubAreas();

registerOnClick('inf_3310-FT-001@008', false, false, [0,1,2], function() {
  setInformacion('celdas-rougher-fila-1');
}, function() {});
registerOnClick('inf_3310-FT-011@018', false, false, [0,1,2], function() {
  setInformacion('celdas-rougher-fila-2');
}, function() {});
registerOnClick('inf_3310-FT-021@028', false, false, [0,1,2], function() {
  setInformacion('celdas-rougher-fila-3');
}, function() {});
registerOnClick('inf_3310-FT-031@038', false, false, [0,1,2], function() {
  setInformacion('celdas-rougher-fila-4');
}, function() {});
registerOnClick('inf_3310-FT-047@049', false, false, [0,1,2], function() {
  setInformacion('celdas-primera-limpieza-1');
}, function() {});
registerOnClick('inf_3310-FT-051@053', false, false, [0,1,2], function() {
  setInformacion('celdas-primera-limpieza-2');
}, function() {});
registerOnClick('inf_3310-FT-059@062', false, false, [0,1,2], function() {
  setInformacion('celdas-scavenger-fila-1');
}, function() {});
registerOnClick('inf_3310-FT-064@067', false, false, [0,1,2], function() {
  setInformacion('celdas-scavenger-fila-2');
}, function() {});
registerOnClick('inf_3310-FT-071@074', false, false, [0,1,2], function() {
  setInformacion('celdas-segunda-limpieza-cobre');
}, function() {});
registerOnClick('inf_3310-PU-001/002/014', false, false, [0,1,2], function() {
  setInformacion('bombas-alimentacion-celdas-primera-limpieza');
}, function() {});
registerOnClick('inf_3310-PU-003/004', false, false, [0,1,2], function() {
  setInformacion('bombas-alimentacion-celdas-segunda-limpieza');
}, function() {});
registerOnClick('inf_3310-SA-301', false, false, [0,1,2], function() {
  setInformacion('muestreador-metalurgico-alimentacion-rougher');
}, function() {});
registerOnClick('inf_3310-SA-311', false, false, [0,1,2], function() {
  setInformacion('muestreador-metalurgico-concentrado-cu-mo');
}, function() {});
registerOnClick('inf_3320-CY-001@003', false, false, [0,1,2], function() {
  setInformacion('nidos-hidrociclones-remolienda');
}, function() {});
registerOnClick('inf_3320-MI-001@003', false, false, [0,1,2], function() {
  setInformacion('molinos-verticales');
}, function() {});
registerOnClick('inf_3320-PU-001@003/005', false, false, [0,1,2], function() {
  setInformacion('bombas-alimentacion-nidos-hidrociclones-remolienda');
}, function() {});

eventHTMLElem('click', 'go-back', true, function(event) {
  goBack();
  ocultar_objetos_riesgos_all();
});
eventHTMLElem('click', 'go-area', true, function(event) {
  goBack();
  ocultar_objetos_riesgos_all();
});
eventHTMLElem('click', 'cam-muestreador-metalurgico-alimentacion', true, function(event) {
  setUserPosition('CamaraDireccionColumna', false, 'CamaraColumna', 'Icono001.002');
});
eventHTMLElem('click', 'cam-celdas-rougher', true, function(event) {
  setUserPosition('CamaraDireccionFlotacion', false, 'CamaraFlotacion', 'Icono001.001');
});
eventHTMLElem('click', 'cam-bombas-alimentacion', true, function(event) {
  setUserPosition('CamaraDireccionSopladores', false, 'CamaraSopladores', 'Icono001.006');
});
eventHTMLElem('click', 'cam-segunda-limpieza-cobre', true, function(event) {
  setUserPosition('CamaraDireccionVertimill', false, 'CamaraVertimill', 'Icono001.003');
});
eventHTMLElem('click', 'cam-nido-hidrociclones', true, function(event) {
  setUserPosition('CamaraDireccionNido', false, 'CamaraNido', 'Icono001.004');
});
registerOnClick('ubi_3310-SA-301', false, false, [0,1,2], function() {
  setUserPosition('Camera_3310-SA-301', 'operador-muestreador-metalurgico-alimentacion', 'ubi_3310-SA-301', null);
}, function() {});
registerOnClick('ubi_3310_FT', false, false, [0,1,2], function() {
  setUserPosition('Camera_3310_FT', 'operador-celdas-rougher', 'ubi_3310_FT', null);
}, function() {});
registerOnClick('ubi_CY', false, false, [0,1,2], function() {
  setUserPosition('Camera_CY', 'operador-nido-hidrociclones', 'ubi_CY', null);
}, function() {});
registerOnClick('ubi_FT_TANQUES', false, false, [0,1,2], function() {
  setUserPosition('Camera_FT_TANQUES', 'operador-segunda-limpieza-cobre', 'ubi_FT_TANQUES', null);
}, function() {});
registerOnClick('ubi_PU', false, false, [0,1,2], function() {
  setUserPosition('Camera_PU', 'operador-bombas-alimentacion', 'ubi_PU', null);
}, function() {});
registerOnClick('ubi_SA', false, false, [0,1,2], function() {
  setUserPosition('Camera_SA', 'operador-muestreador-metalurgico-concentrado-cu-mo', 'ubi_SA', null);
}, function() {});

// preguntar bien el nombre de esto
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
registerOnClick('inf_33510-FE-002', false, false, [0,1,2], function() {
  console.log('3510-fe-002');
  setInformacion('fajas-alimentadoras-planta-cal-2');
}, function() {});
registerOnClick('inf_3510-BH-001', false, false, [0,1,2], function() {
  setInformacion('colectores-polvo-silo-cal-1');
}, function() {});
registerOnClick('inf_3510-BH-002', false, false, [0,1,2], function() {
  setInformacion('colectores-polvo-silo-cal-2');
}, function() {});
registerOnClick('inf_3510-CY-001', false, false, [0,1,2], function() {
  setInformacion('nido-hidrociclones-planta-lechada-cal');
}, function() {});
registerOnClick('inf_3510-DB-001', false, false, [0,1,2], function() {
  setInformacion('cajon-distribucion-lechada-cal');
}, function() {});
registerOnClick('inf_3510-FA-002', false, false, [0,1,2], function() {
  setInformacion('ventilador-lavador-gases-planta-lechada-cal');
}, function() {});
registerOnClick('inf_3510-FE-001', false, false, [0,1,2], function() {
  setInformacion('fajas-alimentadoras-planta-cal-1');
}, function() {});
registerOnClick('inf_3510-MI-001', false, false, [0,1,2], function() {
  setInformacion('molino-vertical-planta-lechada-cal');
}, function() {});
registerOnClick('inf_3510-PU-001', false, false, [0,1,2], function() {
  setInformacion('bombas-recirculacion-molino-planta-lechada-cal-1');
}, function() {});
registerOnClick('inf_3510-PU-002', false, false, [0,1,2], function() {
  setInformacion('bombas-alimentacion-ciclon-planta-lechada-cal-2');
}, function() {});
registerOnClick('inf_3510-PU-003', false, false, [0,1,2], function() {
  setInformacion('bombas-lechada-cal-3');
}, function() {});
registerOnClick('inf_3510-PU-004', false, false, [0,1,2], function() {
  setInformacion('bombas-lechada-cal-4');
}, function() {});
registerOnClick('inf_3510-PU-011', false, false, [0,1,2], function() {
  setInformacion('bombas-recirculacion-molino-planta-lechada-cal-11');
}, function() {});
registerOnClick('inf_3510-PU-012', false, false, [0,1,2], function() {
  setInformacion('bombas-alimentacion-ciclon-planta-lechada-cal-12');
}, function() {});
registerOnClick('inf_3510-TK-001', false, false, [0,1,2], function() {
  setInformacion('tanque-clasificador-planta-lechada-cal-1');
}, function() {});
registerOnClick('inf_3510-TK-002', false, false, [0,1,2], function() {
  setInformacion('tanque-almacenamiento-lechada-cal-2');
}, function() {});
registerOnClick('inf_inf_3510-TK-003', false, false, [0,1,2], function() {
  setInformacion('tanque-almacenamiento-lechada-cal-3');
}, function() {});
registerOnClick('inf_3510-TK-004', false, false, [0,1,2], function() {
  setInformacion('tanque-traspaso-planta-lechada-cal');
}, function() {});
registerOnClick('inf_3520-BH-001', false, false, [0,1,2], function() {
  setInformacion('colector-polvo-colector-2');
}, function() {});
registerOnClick('inf_3520-PU-002', false, false, [0,1,2], function() {
  setInformacion('bomba-transferencia-colector-1');
}, function() {});
registerOnClick('inf_3520-PU-007', false, false, [0,1,2], function() {
  setInformacion('bomba-descarga-espumante-1');
}, function() {});
registerOnClick('inf_3520-PU-008', false, false, [0,1,2], function() {
  setInformacion('bomba-transferencia-espumante-1');
}, function() {});
registerOnClick('inf_3520-PU-010', false, false, [0,1,2], function() {
  setInformacion('bomba-descarga-espumante-2');
}, function() {});
registerOnClick('inf_3520-PU-011', false, false, [0,1,2], function() {
  setInformacion('bomba-transferencia-espumante-2');
}, function() {});
registerOnClick('inf_3520-PU-022', false, false, [0,1,2], function() {
  setInformacion('bomba-descarga-colector-3');
}, function() {});
registerOnClick('inf_3520-PU-023', false, false, [0,1,2], function() {
  setInformacion('bomba-transferencia-colector-3');
}, function() {});
registerOnClick('inf_3520-PU-026', false, false, [0,1,2], function() {
  setInformacion('bomba-descarga-diesel-planta-concentradora');
}, function() {});
registerOnClick('inf_3520-PU-038', false, false, [0,1,2], function() {
  setInformacion('bomba-transferencia-diesel-planta-concentradora');
}, function() {});
registerOnClick('inf_3520-TK-003', false, false, [0,1,2], function() {
  setInformacion('tanque-mezclador-colector-2');
}, function() {});

eventHTMLElem('click', 'cam-colector-polvo-silo-cal', true, function(event) {
  setUserPosition('Camera_3510-BH-001/002', false, 'ubi_3510-BH-001/002', null);
});
eventHTMLElem('click', 'cam-nido-hidrociclones-planta-lechada', true, function(event) {
  setUserPosition('Camera_3510-FE-001/002', false, 'ubi_3510-FE-001/002', null);
});
eventHTMLElem('click', 'cam-molino-vertical-planta-lechada', true, function(event) {
  setUserPosition('Camera_3510-TK-001', false, 'ubi_3510-TK-001', null);
});
eventHTMLElem('click', 'cam-bombas-lechada-cal', true, function(event) {
  setUserPosition('Camera_3510-CY-001', false, 'ubi_3510-CY-001', null);
});
eventHTMLElem('click', 'cam-tanque-traspaso-planta-lechada', true, function(event) {
  setUserPosition('Camera_3510-TK-002/003', false, 'ubi_3510-TK-002/003', null);
});
eventHTMLElem('click', 'cam-tanque-almacenamiento-lechada', true, function(event) {
  setUserPosition('Camera_3510-TK-002/003', false, 'ubi_3510-TK-002/003', null);
});
eventHTMLElem('click', 'cam-colector-polvo-colector-2', true, function(event) {
  setUserPosition('Camera_3520-BH-001', false, 'ubi_3520-BH-001', null);
});
eventHTMLElem('click', 'cam-bomba-descarga-espumante-1', true, function(event) {
  setUserPosition('Camera_3520-PU-007', false, 'ubi_3520-PU-007', null);
});
eventHTMLElem('click', 'cam-bomba-descarga-espumante-2', true, function(event) {
  setUserPosition('Camera_3520-PU-010', false, 'ubi_3520-PU-010', null);
});
eventHTMLElem('click', 'cam-bomba-descarga-colector-3', true, function(event) {
  setUserPosition('Camera_3520-PU-022', false, 'ubi_3520-PU-022', null);
});
eventHTMLElem('click', 'cam-bomba-transferencia-colector-3-espumante-2', true, function(event) {
  setUserPosition('Camera_3520-PU-023', false, 'ubi_3520-PU-023', null);
});
eventHTMLElem('click', 'cam-bomba-descarga-diesel-planta-concentradora', true, function(event) {
  setUserPosition('Camera_3520-PU-026', false, 'ubi_3520-PU-026', null);
});
eventHTMLElem('click', 'cam-bomba-transferencia-diesel-planta-concentradora', true, function(event) {
  setUserPosition('Camera_3520-PU-038', false, 'ubi_3520-PU-038', null);
});
eventHTMLElem('click', 'cam-tanque-mezclador-colector-2', true, function(event) {
  setUserPosition('Camera_3520-TK-003', false, 'ubi_3520-TK-003', null);
});

registerOnClick('ubi_3510-BH-001/002', false, false, [0,1,2], function() {
  setUserPosition('Camera_3510-BH-001/002', 'operador-colector-polvo-silo-cal', 'ubi_3510-BH-001/002', null);
}, function() {});
registerOnClick('ubi_3510-CY-001', false, false, [0,1,2], function() {
  setUserPosition('Camera_3510-CY-001', 'operador-nido-hidrociclones-planta-lechada', 'ubi_3510-CY-001', null);
}, function() {});
registerOnClick('ubi_3510-FE-001/002', false, false, [0,1,2], function() {
  setUserPosition('Camera_3510-FE-001/002', 'operador-molino-vertical-planta-lechada', 'ubi_3510-FE-001/002', null);
}, function() {});
registerOnClick('ubi_3510-PU-003/004', false, false, [0,1,2], function() {
  setUserPosition('Camera_3510-PU-003/004', 'operador-bombas-lechada-cal', 'ubi_3510-PU-003/004', null);
}, function() {});
registerOnClick('ubi_3510-TK-001', false, false, [0,1,2], function() {
  setUserPosition('Camera_3510-TK-001', 'operador-tanque-traspaso-planta-lechada', 'ubi_3510-TK-001', null);
}, function() {});
registerOnClick('ubi_3510-TK-002/003', false, false, [0,1,2], function() {
  setUserPosition('Camera_3510-TK-002/003', 'operador-tanque-almacenamiento-lechada', 'ubi_3510-TK-002/003', null);
}, function() {});
registerOnClick('ubi_3520-BH-001', false, false, [0,1,2], function() {
  setUserPosition('Camera_3520-BH-001', 'operador-colector-polvo-colector-2', 'ubi_3520-BH-001', null);
}, function() {});
registerOnClick('ubi_3520-PU-007', false, false, [0,1,2], function() {
  setUserPosition('Camera_3520-PU-007', 'operador-bomba-descarga-espumante-1', 'ubi_3520-PU-007', null);
}, function() {});
registerOnClick('ubi_3520-PU-010', false, false, [0,1,2], function() {
  setUserPosition('Camera_3520-PU-010', 'operador-bomba-descarga-espumante-2', 'ubi_3520-PU-010', null);
}, function() {});
registerOnClick('ubi_3520-PU-022', false, false, [0,1,2], function() {
  setUserPosition('Camera_3520-PU-022', 'operador-bomba-descarga-colector-3', 'ubi_3520-PU-022', null);
}, function() {});
registerOnClick('ubi_3520-PU-023', false, false, [0,1,2], function() {
  setUserPosition('Camera_3520-PU-023', 'operador-bomba-transferencia-colector-3-espumante-2', 'ubi_3520-PU-023', null);
}, function() {});
registerOnClick('ubi_3520-PU-026', false, false, [0,1,2], function() {
  setUserPosition('Camera_3520-PU-026', 'operador-bomba-descarga-diesel-planta-concentradora', 'ubi_3520-PU-026', null);
}, function() {});
registerOnClick('ubi_3520-PU-038', false, false, [0,1,2], function() {
  setUserPosition('Camera_3520-PU-038', 'operador-bomba-transferencia-diesel-planta-concentradora', 'ubi_3520-PU-038', null);
}, function() {});
registerOnClick('ubi_3520-TK-003', false, false, [0,1,2], function() {
  setUserPosition('Camera_3520-TK-003', 'operador-tanque-mezclador-colector-2', 'ubi_3520-TK-003', null);
}, function() {});

equipos_3900 = ['ubi_3910-CP-001@006', 'inf_3910-CP-001', 'inf_3910-CP-002', 'inf_3910-CP-003', 'inf_3910-CP-004', 'inf_3910-CP-005', 'inf_3910-CP-006'];
equipos_3500 = ['ubi_3510-BH-001/002', 'ubi_3510-CY-001', 'ubi_3510-FE-001/002', 'ubi_3510-PU-003/004', 'ubi_3510-TK-001', 'ubi_3510-TK-002/003', 'ubi_3520-BH-001', 'ubi_3520-PU-007', 'ubi_3520-PU-010', 'ubi_3520-PU-022', 'ubi_3520-PU-023', 'ubi_3520-PU-026', 'ubi_3520-PU-038', 'ubi_3520-TK-003', 'inf_33510-FE-002', 'inf_3510-BH-001', 'inf_3510-BH-002', 'inf_3510-CY-001', 'inf_3510-DB-001', 'inf_3510-FA-002', 'inf_3510-FE-001', 'inf_3510-MI-001', 'inf_3510-PU-001', 'inf_3510-PU-002', 'inf_3510-PU-003', 'inf_3510-PU-004', 'inf_3510-PU-011', 'inf_3510-PU-012', 'inf_3510-TK-001', 'inf_3510-TK-002', 'inf_3510-TK-004', 'inf_3520-BH-001', 'inf_3520-PU-002', 'inf_3520-PU-007', 'inf_3520-PU-008', 'inf_3520-PU-010', 'inf_3520-PU-011', 'inf_3520-PU-022', 'inf_3520-PU-023', 'inf_3520-PU-026', 'inf_3520-PU-038', 'inf_3520-TK-003', 'inf_inf_3510-TK-003'];
equipos_3300 = ['ubi_3310-SA-301', 'ubi_3310_FT', 'ubi_CY', 'ubi_FT_TANQUES', 'ubi_PU', 'ubi_SA', 'inf_3310-FT-001@008', 'inf_3310-FT-011@018', 'inf_3310-FT-021@028', 'inf_3310-FT-031@038', 'inf_3310-FT-047@049', 'inf_3310-FT-051@053', 'inf_3310-FT-059@062', 'inf_3310-FT-064@067', 'inf_3310-FT-071@074', 'inf_3310-PU-001/002/014', 'inf_3310-PU-003/004', 'inf_3310-SA-301', 'inf_3310-SA-311', 'inf_3320-CY-001@003', 'inf_3320-MI-001@003', 'inf_3320-PU-001@003/005'];

eventHTMLElem('click', 'cam-compresor-aire-area-concentradora', true, function(event) {
  setUserPosition('Camera_3910-CP-001@006', false, 'ubi_3910-CP-001@006', null);
});
registerOnClick('ubi_3910-CP-001@006', false, false, [0,1,2], function() {
  setUserPosition('Camera_3910-CP-001@006', 'operador-compresor-aire-area-concentradora', 'ubi_3910-CP-001@006', null);
}, function() {});
registerOnClick('inf_3910-CP-001', false, false, [0,1,2], function() {
  setInformacion('compresor-aire-area-concentradora-1');
}, function() {});
registerOnClick('inf_3910-CP-002', false, false, [0,1,2], function() {
  setInformacion('compresor-aire-area-concentradora-2');
}, function() {});
registerOnClick('inf_3910-CP-003', false, false, [0,1,2], function() {
  setInformacion('compresor-aire-area-concentradora-3');
}, function() {});
registerOnClick('inf_3910-CP-004', false, false, [0,1,2], function() {
  setInformacion('compresor-aire-area-concentradora-4');
}, function() {});
registerOnClick('inf_3910-CP-005', false, false, [0,1,2], function() {
  setInformacion('compresor-aire-area-concentradora-5');
}, function() {});
registerOnClick('inf_3910-CP-006', false, false, [0,1,2], function() {
  setInformacion('compresor-aire-area-concentradora-6');
}, function() {});

getParameter = getUrlData('PARAMS', false);
for (var i_index in getParameter) {
  let i = getParameter[i_index];
  getParameter = i;
}
if (getParameter == 3500) {
  operadores_visibles = ['ubi_3510-BH-001/002', 'ubi_3510-CY-001', 'ubi_3510-FE-001/002', 'ubi_3510-PU-003/004', 'ubi_3510-TK-001', 'ubi_3510-TK-002/003', 'ubi_3520-BH-001', 'ubi_3520-PU-007', 'ubi_3520-PU-010', 'ubi_3520-PU-022', 'ubi_3520-PU-023', 'ubi_3520-PU-026', 'ubi_3520-PU-038', 'ubi_3520-TK-003'];
  changeVis(equipos_3300, false);
  changeVis(equipos_3900, false);
} else if (getParameter == 3900) {
  operadores_visibles = 'ubi_3910-CP-001@006';
  changeVis(equipos_3500, false);
  changeVis(equipos_3300, false);
} else {
  operadores_visibles = ['ubi_3310-SA-301', 'ubi_3310_FT', 'ubi_CY', 'ubi_FT_TANQUES', 'ubi_PU', 'ubi_SA'];
  changeVis(equipos_3500, false);
  changeVis(equipos_3900, false);
}

'ubi_3510-PU-003/004';

'Camera_3510-PU-003/004';



} // end of PL.init function

PL.disposeListeners = function() {
    if (_pGlob) {
        _pGlob.eventListeners.forEach(({ target, type, listener, optionsOrUseCapture }) => {
            target.removeEventListener(type, listener, optionsOrUseCapture);
        });
        _pGlob.eventListeners.length = 0;
    }
}

PL.dispose = function() {
    PL.disposeListeners();
    _pGlob = null;
    // backward compatibility
    if (v3d[Symbol.toStringTag] !== 'Module') {
        delete v3d.PL;
        delete v3d.puzzles;
    }
}



})(); // end of closure
