/* eslint-disable */

/**
 * Generated by Verge3D Puzzles v.4.3.1
 * Fri, 13 Oct 2023 21:41:29 GMT
 * Prefer not editing this file as your changes may get overridden once Puzzles are saved.
 * Check out https://www.soft8soft.com/docs/manual/en/introduction/Using-JavaScript.html
 * for the information on how to add your own JavaScript to Verge3D apps.
 */
function createPL(v3d = window.v3d) {

// global variables/constants used by puzzles' functions

var LIST_NONE = '<none>';

var _pGlob = {};

_pGlob.objCache = {};
_pGlob.fadeAnnotations = true;
_pGlob.pickedObject = '';
_pGlob.hoveredObject = '';
_pGlob.mediaElements = {};
_pGlob.loadedFile = '';
_pGlob.states = [];
_pGlob.percentage = 0;
_pGlob.openedFile = '';
_pGlob.openedFileMeta = {};
_pGlob.xrSessionAcquired = false;
_pGlob.xrSessionCallbacks = [];
_pGlob.screenCoords = new v3d.Vector2();
_pGlob.intervalTimers = {};
_pGlob.customEvents = new v3d.EventDispatcher();
_pGlob.eventListeners = [];

_pGlob.AXIS_X = new v3d.Vector3(1, 0, 0);
_pGlob.AXIS_Y = new v3d.Vector3(0, 1, 0);
_pGlob.AXIS_Z = new v3d.Vector3(0, 0, 1);
_pGlob.MIN_DRAG_SCALE = 10e-4;
_pGlob.SET_OBJ_ROT_EPS = 1e-8;

_pGlob.vec2Tmp = new v3d.Vector2();
_pGlob.vec2Tmp2 = new v3d.Vector2();
_pGlob.vec3Tmp = new v3d.Vector3();
_pGlob.vec3Tmp2 = new v3d.Vector3();
_pGlob.vec3Tmp3 = new v3d.Vector3();
_pGlob.vec3Tmp4 = new v3d.Vector3();
_pGlob.eulerTmp = new v3d.Euler();
_pGlob.eulerTmp2 = new v3d.Euler();
_pGlob.quatTmp = new v3d.Quaternion();
_pGlob.quatTmp2 = new v3d.Quaternion();
_pGlob.colorTmp = new v3d.Color();
_pGlob.mat4Tmp = new v3d.Matrix4();
_pGlob.planeTmp = new v3d.Plane();
_pGlob.raycasterTmp = new v3d.Raycaster(); // always check visibility

var PL = {};
// backward compatibility
if (v3d[Symbol.toStringTag] !== 'Module') {
    v3d.PL = v3d.puzzles = PL;
}

PL.procedures = PL.procedures || {};




PL.execInitPuzzles = function(options) {
    // always null, should not be available in "init" puzzles
    var appInstance = null;
    // app is more conventional than appInstance (used in exec script and app templates)
    var app = null;

    var _initGlob = {};
    _initGlob.percentage = 0;
    _initGlob.output = {
        initOptions: {
            fadeAnnotations: true,
            useBkgTransp: false,
            preserveDrawBuf: false,
            useCompAssets: false,
            useFullscreen: true,
            useCustomPreloader: false,
            preloaderStartCb: function() {},
            preloaderProgressCb: function() {},
            preloaderEndCb: function() {},
        }
    }

    // provide the container's id to puzzles that need access to the container
    _initGlob.container = options !== undefined && 'container' in options
            ? options.container : "";

    

    // utility functions envoked by the HTML puzzles
function getElements(ids, isParent) {
    var elems = [];
    if (Array.isArray(ids) && ids[0] != 'CONTAINER' && ids[0] != 'WINDOW' &&
        ids[0] != 'DOCUMENT' && ids[0] != 'BODY' && ids[0] != 'QUERYSELECTOR') {
        for (var i = 0; i < ids.length; i++)
            elems.push(getElement(ids[i], isParent));
    } else {
        elems.push(getElement(ids, isParent));
    }
    return elems;
}

function getElement(id, isParent) {
    var elem;
    if (Array.isArray(id) && id[0] == 'CONTAINER') {
        if (appInstance !== null) {
            elem = appInstance.container;
        } else if (typeof _initGlob !== 'undefined') {
            // if we are on the initialization stage, we still can have access
            // to the container element
            var id = _initGlob.container;
            if (isParent) {
                elem = parent.document.getElementById(id);
            } else {
                elem = document.getElementById(id);
            }
        }
    } else if (Array.isArray(id) && id[0] == 'WINDOW') {
        if (isParent)
            elem = parent;
        else
            elem = window;
    } else if (Array.isArray(id) && id[0] == 'DOCUMENT') {
        if (isParent)
            elem = parent.document;
        else
            elem = document;
    } else if (Array.isArray(id) && id[0] == 'BODY') {
        if (isParent)
            elem = parent.document.body;
        else
            elem = document.body;
    } else if (Array.isArray(id) && id[0] == 'QUERYSELECTOR') {
        if (isParent)
            elem = parent.document.querySelector(id);
        else
            elem = document.querySelector(id);
    } else {
        if (isParent)
            elem = parent.document.getElementById(id);
        else
            elem = document.getElementById(id);
    }
    return elem;
}

// setHTMLElemAttribute puzzle
function setHTMLElemAttribute(attr, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem) continue;

        if ((attr == 'href' || attr == 'src') && value instanceof Promise) {
            // resolve promise value for url-based attributes
            value.then(function(response) {
                elem[attr] = response;
            });
        } else {
            elem[attr] = value;
        }
    }
}

// setHTMLElemStyle puzzle
function setHTMLElemStyle(prop, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem || !elem.style)
            continue;
        elem.style[prop] = value;
    }
}



// initSettings puzzle
_initGlob.output.initOptions.fadeAnnotations = true;
_initGlob.output.initOptions.useBkgTransp = false;
_initGlob.output.initOptions.preserveDrawBuf = false;
_initGlob.output.initOptions.useCompAssets = true;
_initGlob.output.initOptions.useFullscreen = true;


// initPreloader puzzle
_initGlob.output.initOptions.useCustomPreloader = true;
_initGlob.output.initOptions.preloaderStartCb = function() {
    _initGlob.percentage = 0;
    (function() {})();
};
_initGlob.output.initOptions.preloaderProgressCb = function(percentage) {
    _initGlob.percentage = percentage;
    (function() {
  setHTMLElemAttribute('innerHTML', String(Math.round(_initGlob.percentage)) + '%', 'loading_percentage', true);
})();
};
_initGlob.output.initOptions.preloaderEndCb = function() {
    _initGlob.percentage = 100;
    (function() {
  setHTMLElemStyle('display', 'none', 'preloader_screen', true);
  setHTMLElemStyle('display', 'flex', 'logo-img', true);
  setHTMLElemStyle('display', 'none', 'cam-titire', true);
  setHTMLElemStyle('display', 'none', 'cam-presa-vizcachas', true);
  setHTMLElemStyle('display', 'none', 'cam-pica-rocas', true);
  setHTMLElemStyle('display', 'none', 'cam-fajas-alimentadoras', true);
  setHTMLElemStyle('display', 'none', 'cam-fajas-sacrificio', true);
  setHTMLElemStyle('display', 'none', 'cam-rompe-rocas', true);
  setHTMLElemStyle('display', 'none', 'cam-tolva-recepcion', true);
  setHTMLElemStyle('display', 'none', 'cam-faja-overland', true);
  setHTMLElemStyle('display', 'none', 'cam-colectores', true);
  setHTMLElemStyle('display', 'none', 'cam-molinos', true);
  setHTMLElemStyle('display', 'none', 'cam-transportadora', true);
  setHTMLElemStyle('display', 'none', 'cam-faja-silo-pebble', true);
  setHTMLElemStyle('display', 'none', 'cam-alimentador-chancador', true);
  setHTMLElemStyle('display', 'none', 'cam-chancadora', true);
  setHTMLElemStyle('display', 'none', 'cam-hidrociclones', true);
  setHTMLElemStyle('display', 'none', 'cam-alimentadores', true);
  setHTMLElemStyle('display', 'none', 'cam-muestreador-metalurgico-alimentacion', true);
  setHTMLElemStyle('display', 'none', 'cam-celdas-rougher', true);
  setHTMLElemStyle('display', 'none', 'cam-bombas-alimentacion', true);
  setHTMLElemStyle('display', 'none', 'cam-segunda-limpieza-cobre', true);
  setHTMLElemStyle('display', 'none', 'cam-nido-hidrociclones', true);
  setHTMLElemStyle('display', 'none', 'cam-torre-captacion-1', true);
  setHTMLElemStyle('display', 'none', 'cam-torre-captacion-3', true);
  setHTMLElemStyle('display', 'none', 'cam-torre-captacion-3', true);
  setHTMLElemStyle('display', 'none', 'cam-carga-hidrociclon', true);
  setHTMLElemStyle('display', 'none', 'cam-nidos-hidrociclones-primera-etapa', true);
  setHTMLElemStyle('display', 'none', 'cam-cajon-descarga-hidrociclones', true);
  setHTMLElemStyle('display', 'none', 'cam-nidos-hidrociclones-segunda-etapa', true);
  setHTMLElemStyle('display', 'none', 'cam-cajones-descarga-segunda-etapa', true);
  setHTMLElemStyle('display', 'none', 'cam-estacion-intermedia', true);
  setHTMLElemStyle('display', 'none', 'cam-faja-alimentadora', true);
  setHTMLElemStyle('display', 'none', 'cam-faja-receptora-concentrado', true);
  setHTMLElemStyle('display', 'none', 'cam-faja-recuperacion-concentrado', true);
  setHTMLElemStyle('display', 'none', 'cam-faja-tubular-receptora', true);
  setHTMLElemStyle('display', 'none', 'cam-faja-tubular-muelle', true);
  setHTMLElemStyle('display', 'none', 'cam-cargador-radial-barco', true);
  setHTMLElemStyle('display', 'none', '5000-sala-electrica', true);
  setHTMLElemStyle('display', 'none', '5000-faja-tubular-muelle', true);
  setHTMLElemStyle('display', 'none', '5000-bodegas-nave', true);
  setHTMLElemStyle('display', 'flex', 'btn_empezar_recorrido_0', true);
  setHTMLElemStyle('display', 'none', 'btn_empezar_recorrido_1', true);
  setHTMLElemStyle('display', 'none', 'btn_empezar_recorrido_2', true);
  setHTMLElemStyle('display', 'none', 'btn_empezar_recorrido_3', true);
  setHTMLElemStyle('display', 'none', 'btn_empezar_recorrido_4', true);
  setHTMLElemStyle('display', 'none', 'btn_empezar_recorrido_5', true);
  setHTMLElemStyle('display', 'none', 'btn_empezar_recorrido_6', true);
})();
};

    return _initGlob.output;
}

PL.init = function(appInstance, initOptions) {

// app is more conventional than appInstance (used in exec script and app templates)
var app = appInstance;

initOptions = initOptions || {};

if ('fadeAnnotations' in initOptions) {
    _pGlob.fadeAnnotations = initOptions.fadeAnnotations;
}

this.procedures["inhabilitarBotonesMenu"] = inhabilitarBotonesMenu;
this.procedures["ocultar-sensor"] = ocultar_sensor;
this.procedures["habilitarBotonesMenu"] = habilitarBotonesMenu;

var sena_3200, sensor_activo, animacion_area, area_seleccionada, texto_area, animation_counter, sensor_area, button_id, sena_in;

// featureAvailable puzzle
function featureAvailable(feature) {

    var userAgent = window.navigator.userAgent;
    var platform = window.navigator.platform;

    switch (feature) {
    case 'LINUX':
        return /Linux/.test(platform);
    case 'WINDOWS':
        return ['Win32', 'Win64', 'Windows', 'WinCE'].indexOf(platform) !== -1;
    case 'MACOS':
        return (['Macintosh', 'MacIntel', 'MacPPC', 'Mac68K'].indexOf(platform) !== -1 && !v3d.Detector.checkIOS());
    case 'IOS':
        return v3d.Detector.checkIOS();
    case 'ANDROID':
        return /Android/i.test(userAgent);
    case 'MOBILE':
        return (/Android|webOS|BlackBerry/i.test(userAgent) || v3d.Detector.checkIOS());

    case 'CHROME':
        // Chromium based
        return (!!window.chrome && !/Edge/.test(navigator.userAgent));
    case 'FIREFOX':
        return /Firefox/.test(navigator.userAgent);
    case 'IE':
        return /Trident/.test(navigator.userAgent);
    case 'EDGE':
        return /Edge/.test(navigator.userAgent);
    case 'SAFARI':
        return (/Safari/.test(navigator.userAgent) && !/Chrome/.test(navigator.userAgent));

    case 'TOUCH':
        return !!(('ontouchstart' in window) || window.DocumentTouch && document instanceof DocumentTouch);
    case 'RETINA':
        return window.devicePixelRatio >= 2;
    case 'HDR':
        return appInstance.useHDR;
    case 'WEBAUDIO':
        return v3d.Detector.checkWebAudio();
    case 'WEBGL':
        var canvas = document.createElement('canvas');
        var gl = canvas.getContext('webgl')
        return !!gl;
    case 'WEBGL2':
        var canvas = document.createElement('canvas');
        var gl = canvas.getContext('webgl2')
        return !!gl;
    case 'WOOCOMMERCE':
        var woo_fun = window.parent.v3d_woo_get_product_info || window.parent.parent.v3d_woo_get_product_info;
        return !!woo_fun;
    case 'DO_NOT_TRACK':
        if (navigator.doNotTrack == '1' || window.doNotTrack == '1')
            return true;
        else
            return false;
    default:
        return false;
    }

}

// utility functions envoked by the HTML puzzles
function getElements(ids, isParent) {
    var elems = [];
    if (Array.isArray(ids) && ids[0] != 'CONTAINER' && ids[0] != 'WINDOW' &&
        ids[0] != 'DOCUMENT' && ids[0] != 'BODY' && ids[0] != 'QUERYSELECTOR') {
        for (var i = 0; i < ids.length; i++)
            elems.push(getElement(ids[i], isParent));
    } else {
        elems.push(getElement(ids, isParent));
    }
    return elems;
}

function getElement(id, isParent) {
    var elem;
    if (Array.isArray(id) && id[0] == 'CONTAINER') {
        if (appInstance !== null) {
            elem = appInstance.container;
        } else if (typeof _initGlob !== 'undefined') {
            // if we are on the initialization stage, we still can have access
            // to the container element
            var id = _initGlob.container;
            if (isParent) {
                elem = parent.document.getElementById(id);
            } else {
                elem = document.getElementById(id);
            }
        }
    } else if (Array.isArray(id) && id[0] == 'WINDOW') {
        if (isParent)
            elem = parent;
        else
            elem = window;
    } else if (Array.isArray(id) && id[0] == 'DOCUMENT') {
        if (isParent)
            elem = parent.document;
        else
            elem = document;
    } else if (Array.isArray(id) && id[0] == 'BODY') {
        if (isParent)
            elem = parent.document.body;
        else
            elem = document.body;
    } else if (Array.isArray(id) && id[0] == 'QUERYSELECTOR') {
        if (isParent)
            elem = parent.document.querySelector(id);
        else
            elem = document.querySelector(id);
    } else {
        if (isParent)
            elem = parent.document.getElementById(id);
        else
            elem = document.getElementById(id);
    }
    return elem;
}

// setHTMLElemStyle puzzle
function setHTMLElemStyle(prop, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem || !elem.style)
            continue;
        elem.style[prop] = value;
    }
}

function _checkListenersSame(target0, type0, listener0, optionsOrUseCapture0,
        target1, type1, listener1, optionsOrUseCapture1) {
    const capture0 = Boolean(optionsOrUseCapture0 instanceof Object
            ? optionsOrUseCapture0.capture : optionsOrUseCapture0);
    const capture1 = Boolean(optionsOrUseCapture1 instanceof Object
            ? optionsOrUseCapture1.capture : optionsOrUseCapture1);
    return target0 === target1 && type0 === type1 && listener0 === listener1
            && capture0 === capture1;
}

/**
 * Add the specified event listener to the specified target. This function also
 * stores listener data for easier disposing.
 */
function bindListener(target, type, listener, optionsOrUseCapture) {
    const alreadyExists = _pGlob.eventListeners.some(elem => {
        return _checkListenersSame(elem.target, elem.type, elem.listener,
                elem.optionsOrUseCapture, target, type, listener,
                optionsOrUseCapture);
    });

    if (!alreadyExists) {
        target.addEventListener(type, listener, optionsOrUseCapture);
        _pGlob.eventListeners.push({ target, type, listener, optionsOrUseCapture });
    }
}

// eventHTMLElem puzzle
function eventHTMLElem(eventType, ids, isParent, callback) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem)
            continue;

        bindListener(elem, eventType, callback);
    }
}

// getHTMLElemAttribute puzzle
function getHTMLElemAttribute(attr, id, isParent) {
    var elem = getElement(id, isParent);
    return elem ? elem[attr]: '';
}

function MediaHTML5(isVideo) {
    this.source = null;
}

Object.assign(MediaHTML5.prototype, {

    load: function(url, isVideo) {
        if (isVideo) {
            this.source = document.createElement('video');
            this.source.playsInline = true;
            this.source.preload = 'auto';
            this.source.autoload = true;
            this.source.crossOrigin = 'anonymous';
        } else {
            this.source = document.createElement('audio');
        }

        this.source.src = url;
        return this;
    },

    play: function() {
        this.source.play();
    },

    pause: function() {
        this.source.pause();
    },

    stop: function() {
        this.source.pause();
        this.source.currentTime = 0;
    },

    rewind: function() {
        this.source.currentTime = 0;
    },

    setPlaybackTime: function(time) {
        this.source.currentTime = time
    },

    getPlaybackTime: function() {
        return this.source.currentTime;
    },

    getDuration: function() {
        return this.source.duration;
    },

    setPlaybackRate: function(rate) {
        this.source.playbackRate = rate;
    },

    isPlaying: function() {
        return this.source.duration > 0 && !this.source.paused;
    },

    setLoop: function(looped) {
        this.source.loop = looped;
    },

    setVolume: function(volume) {
        this.source.volume = volume;
    },

    setMuted: function(muted) {
        this.source.muted = muted;
    },

});

// loadMedia puzzle
function loadMedia_HTML5(url) {

    var elems = _pGlob.mediaElements;
    if (!(url in elems)) {
        elems[url] = new MediaHTML5().load(url);
    }
    return elems[url];
}

// soundVideoMute puzzle
function soundVideoMute(mediaElem) {
    const mediaElems = (Array.isArray(mediaElem) ? mediaElem : [mediaElem]).filter(elem => elem);
    mediaElems.forEach(mediaElem => {
        mediaElem.setMuted(true);
    });
}

// soundVideoUnmute puzzle
function soundVideoUnmute(mediaElem) {
    const mediaElems = (Array.isArray(mediaElem) ? mediaElem : [mediaElem]).filter(elem => elem);
    mediaElems.forEach(mediaElem => {
        mediaElem.setMuted(false);
    });
}

// setHTMLElemAttribute puzzle
function setHTMLElemAttribute(attr, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem) continue;

        if ((attr == 'href' || attr == 'src') && value instanceof Promise) {
            // resolve promise value for url-based attributes
            value.then(function(response) {
                elem[attr] = response;
            });
        } else {
            elem[attr] = value;
        }
    }
}

// Describe this function...
function inhabilitarBotonesMenu() {
  setHTMLElemAttribute('style', 'pointer-events:none;', '1000', true);
  setHTMLElemAttribute('style', 'pointer-events:none;', '2600', true);
  setHTMLElemAttribute('style', 'pointer-events:none;', '3100/3200', true);
  setHTMLElemAttribute('style', 'pointer-events:none;', '3300', true);
  setHTMLElemAttribute('style', 'pointer-events:none;', '4000', true);
  setHTMLElemAttribute('style', 'pointer-events:none;', '5000', true);
}

// utility function envoked by almost all V3D-specific puzzles
// filter off some non-mesh types
function notIgnoredObj(obj) {
    return obj.type !== 'AmbientLight' &&
           obj.name !== '' &&
           !(obj.isMesh && obj.isMaterialGeneratedMesh) &&
           !obj.isAuxClippingMesh;
}


// utility function envoked by almost all V3D-specific puzzles
// find first occurence of the object by its name
function getObjectByName(objName) {
    var objFound;
    var runTime = _pGlob !== undefined;
    objFound = runTime ? _pGlob.objCache[objName] : null;

    if (objFound && objFound.name === objName)
        return objFound;

    if (appInstance.scene) {
        appInstance.scene.traverse(function(obj) {
            if (!objFound && notIgnoredObj(obj) && (obj.name == objName)) {
                objFound = obj;
                if (runTime) {
                    _pGlob.objCache[objName] = objFound;
                }
            }
        });
    }
    return objFound;
}


// utility function envoked by almost all V3D-specific puzzles
// retrieve all objects on the scene
function getAllObjectNames() {
    var objNameList = [];
    appInstance.scene.traverse(function(obj) {
        if (notIgnoredObj(obj))
            objNameList.push(obj.name)
    });
    return objNameList;
}


// utility function envoked by almost all V3D-specific puzzles
// retrieve all objects which belong to the group
function getObjectNamesByGroupName(targetGroupName) {
    var objNameList = [];
    appInstance.scene.traverse(function(obj){
        if (notIgnoredObj(obj)) {
            var groupNames = obj.groupNames;
            if (!groupNames)
                return;
            for (var i = 0; i < groupNames.length; i++) {
                var groupName = groupNames[i];
                if (groupName == targetGroupName) {
                    objNameList.push(obj.name);
                }
            }
        }
    });
    return objNameList;
}


// utility function envoked by almost all V3D-specific puzzles
// process object input, which can be either single obj or array of objects, or a group
function retrieveObjectNames(objNames) {
    var acc = [];
    retrieveObjectNamesAcc(objNames, acc);
    return acc.filter(function(name) {
        return name;
    });
}

function retrieveObjectNamesAcc(currObjNames, acc) {
    if (typeof currObjNames == "string") {
        acc.push(currObjNames);
    } else if (Array.isArray(currObjNames) && currObjNames[0] == "GROUP") {
        var newObj = getObjectNamesByGroupName(currObjNames[1]);
        for (var i = 0; i < newObj.length; i++)
            acc.push(newObj[i]);
    } else if (Array.isArray(currObjNames) && currObjNames[0] == "ALL_OBJECTS") {
        var newObj = getAllObjectNames();
        for (var i = 0; i < newObj.length; i++)
            acc.push(newObj[i]);
    } else if (Array.isArray(currObjNames)) {
        for (var i = 0; i < currObjNames.length; i++)
            retrieveObjectNamesAcc(currObjNames[i], acc);
    }
}

// outline puzzle
function outline(objSelector, doWhat) {
    var objNames = retrieveObjectNames(objSelector);

    if (!appInstance.postprocessing || !appInstance.postprocessing.outlinePass)
        return;
    var outlineArray = appInstance.postprocessing.outlinePass.selectedObjects;
    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i];
        var obj = getObjectByName(objName);
        if (!obj)
            continue;
        if (doWhat == "ENABLE") {
            if (outlineArray.indexOf(obj) == -1)
                outlineArray.push(obj);
        } else {
            var index = outlineArray.indexOf(obj);
            if (index > -1)
                outlineArray.splice(index, 1);
        }
    }
}

// utility function used by the whenClicked, whenHovered and whenDraggedOver puzzles
function initObjectPicking(callback, eventType, mouseDownUseTouchStart, mouseButtons) {

    var elem = appInstance.renderer.domElement;
    bindListener(elem, eventType, pickListener);

    if (eventType == 'mousedown') {

        var touchEventName = mouseDownUseTouchStart ? 'touchstart' : 'touchend';
        bindListener(elem, touchEventName, pickListener);

    } else if (eventType == 'dblclick') {

        var prevTapTime = 0;

        function doubleTapCallback(event) {

            var now = new Date().getTime();
            var timesince = now - prevTapTime;

            if (timesince < 600 && timesince > 0) {

                pickListener(event);
                prevTapTime = 0;
                return;

            }

            prevTapTime = new Date().getTime();
        }

        var touchEventName = mouseDownUseTouchStart ? 'touchstart' : 'touchend';
        bindListener(elem, touchEventName, doubleTapCallback);
    }

    var raycaster = new v3d.Raycaster();

    function pickListener(event) {

        // to handle unload in loadScene puzzle
        if (!appInstance.getCamera())
            return;

        event.preventDefault();

        var xNorm = 0, yNorm = 0;
        if (event instanceof MouseEvent) {
            if (mouseButtons && mouseButtons.indexOf(event.button) == -1)
                return;
            xNorm = event.offsetX / elem.clientWidth;
            yNorm = event.offsetY / elem.clientHeight;
        } else if (event instanceof TouchEvent) {
            var rect = elem.getBoundingClientRect();
            xNorm = (event.changedTouches[0].clientX - rect.left) / rect.width;
            yNorm = (event.changedTouches[0].clientY - rect.top) / rect.height;
        }

        _pGlob.screenCoords.x = xNorm * 2 - 1;
        _pGlob.screenCoords.y = -yNorm * 2 + 1;
        raycaster.setFromCamera(_pGlob.screenCoords, appInstance.getCamera(true));
        var objList = [];
        appInstance.scene.traverse(function(obj){objList.push(obj);});
        var intersects = raycaster.intersectObjects(objList, false);
        callback(intersects, event);
    }
}

function objectsIncludeObj(objNames, testedObjName) {
    if (!testedObjName) return false;

    for (var i = 0; i < objNames.length; i++) {
        if (testedObjName == objNames[i]) {
            return true;
        } else {
            // also check children which are auto-generated for multi-material objects
            var obj = getObjectByName(objNames[i]);
            if (obj && obj.type == "Group") {
                for (var j = 0; j < obj.children.length; j++) {
                    if (testedObjName == obj.children[j].name) {
                        return true;
                    }
                }
            }
        }
    }
    return false;
}

// utility function used by the whenClicked, whenHovered, whenDraggedOver, and raycast puzzles
function getPickedObjectName(obj) {
    // auto-generated from a multi-material object, use parent name instead
    if (obj.isMesh && obj.isMaterialGeneratedMesh && obj.parent) {
        return obj.parent.name;
    } else {
        return obj.name;
    }
}

// whenHovered puzzle
initObjectPicking(function(intersects, event) {

    var prevHovered = _pGlob.hoveredObject;
    var currHovered = '';

    // the event might happen before hover registration
    _pGlob.objHoverInfo = _pGlob.objHoverInfo || [];

    // search for closest hovered object

    var lastIntersectIndex = Infinity;
    _pGlob.objHoverInfo.forEach(function(el) {
        var maxIntersects = el.xRay ? intersects.length : Math.min(1, intersects.length);

        for (var i = 0; i < maxIntersects; i++) {
            var obj = intersects[i].object;
            var objName = getPickedObjectName(obj);

            if (objectsIncludeObj(retrieveObjectNames(el.objSelector), objName) && i <= lastIntersectIndex) {
                currHovered = objName;
                lastIntersectIndex = i;
            }
        }
    });

    if (prevHovered == currHovered) return;

    // first - all "out" callbacks, then - all "over"
    _pGlob.objHoverInfo.forEach(function(el) {
        if (objectsIncludeObj(retrieveObjectNames(el.objSelector), prevHovered)) {
            // ensure the correct value of the hoveredObject block
            _pGlob.hoveredObject = prevHovered;
            el.callbacks[1](event);
        }
    });

    _pGlob.objHoverInfo.forEach(function(el) {
        if (objectsIncludeObj(retrieveObjectNames(el.objSelector), currHovered)) {
            // ensure the correct value of the hoveredObject block
            _pGlob.hoveredObject = currHovered;
            el.callbacks[0](event);
        }
    });

    _pGlob.hoveredObject = currHovered;
}, 'mousemove', false);

// whenHovered puzzle
function registerOnHover(objSelector, xRay, cbOver, cbOut) {

    _pGlob.objHoverInfo = _pGlob.objHoverInfo || [];

    _pGlob.objHoverInfo.push({
        objSelector: objSelector,
        callbacks: [cbOver, cbOut],
        xRay: xRay
    });
}

// show and hide puzzles
function changeVis(objSelector, bool) {
    var objNames = retrieveObjectNames(objSelector);

    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i]
        if (!objName)
            continue;
        var obj = getObjectByName(objName);
        if (!obj)
            continue;
        obj.visible = bool;
        obj.resolveMultiMaterial().forEach(function(objR) {
            objR.visible = bool;
        });
    }
}

/**
 * Get a scene that contains the root of the given action.
 */
function getSceneByAction(action) {
    var root = action.getRoot();
    var scene = root.type == "Scene" ? root : null;
    root.traverseAncestors(function(ancObj) {
        if (ancObj.type == "Scene") {
            scene = ancObj;
        }
    });
    return scene;
}

/**
 * Get the current scene's framerate.
 */
function getSceneAnimFrameRate(scene) {
    if (scene && 'animFrameRate' in scene.userData) {
        return scene.userData.animFrameRate;
    }
    return 24;
}

_pGlob.animMixerCallbacks = [];

var initAnimationMixer = function() {

    function onMixerFinished(e) {
        var cb = _pGlob.animMixerCallbacks;
        var found = [];
        for (var i = 0; i < cb.length; i++) {
            if (cb[i][0] == e.action) {
                cb[i][0] = null; // desactivate
                found.push(cb[i][1]);
            }
        }
        for (var i = 0; i < found.length; i++) {
            found[i]();
        }
    }

    return function initAnimationMixer() {
        if (appInstance.mixer && !appInstance.mixer.hasEventListener('finished', onMixerFinished)) {
            bindListener(appInstance.mixer, 'finished', onMixerFinished);
        }
    };

}();

// animation puzzles
function operateAnimation(operation, animations, from, to, loop, speed, callback, rev) {
    if (!animations)
        return;
    // input can be either single obj or array of objects
    if (typeof animations == "string")
        animations = [animations];

    function processAnimation(animName) {
        var action = v3d.SceneUtils.getAnimationActionByName(appInstance, animName);
        if (!action)
            return;
        switch (operation) {
        case 'PLAY':
            if (!action.isRunning()) {
                action.reset();
                if (loop && (loop != "AUTO"))
                    action.loop = v3d[loop];
                var scene = getSceneByAction(action);
                var frameRate = getSceneAnimFrameRate(scene);

                action.repetitions = Infinity;

                var timeScale = Math.abs(parseFloat(speed));
                if (rev)
                    timeScale *= -1;

                action.timeScale = timeScale;
                action.timeStart = from !== null ? from/frameRate : 0;
                if (to !== null) {
                    action.getClip().duration = to/frameRate;
                } else {
                    action.getClip().resetDuration();
                }
                action.time = timeScale >= 0 ? action.timeStart : action.getClip().duration;

                action.paused = false;
                action.play();

                // push unique callbacks only
                var callbacks = _pGlob.animMixerCallbacks;
                var found = false;

                for (var j = 0; j < callbacks.length; j++)
                    if (callbacks[j][0] == action && callbacks[j][1] == callback)
                        found = true;

                if (!found)
                    _pGlob.animMixerCallbacks.push([action, callback]);
            }
            break;
        case 'STOP':
            action.stop();

            // remove callbacks
            var callbacks = _pGlob.animMixerCallbacks;
            for (var j = 0; j < callbacks.length; j++)
                if (callbacks[j][0] == action) {
                    callbacks.splice(j, 1);
                    j--
                }

            break;
        case 'PAUSE':
            action.paused = true;
            break;
        case 'RESUME':
            action.paused = false;
            break;
        case 'SET_FRAME':
            var scene = getSceneByAction(action);
            var frameRate = getSceneAnimFrameRate(scene);
            action.time = from ? from/frameRate : 0;
            action.play();
            action.paused = true;
            break;
        case 'SET_SPEED':
            var timeScale = parseFloat(speed);
            action.timeScale = rev ? -timeScale : timeScale;
            break;
        }
    }

    for (var i = 0; i < animations.length; i++) {
        var animName = animations[i];
        if (animName)
            processAnimation(animName);
    }

    initAnimationMixer();
}

// whenClicked puzzle
function registerOnClick(objSelector, xRay, doubleClick, mouseButtons, cbDo, cbIfMissedDo) {

    // for AR/VR
    _pGlob.objClickInfo = _pGlob.objClickInfo || [];

    _pGlob.objClickInfo.push({
        objSelector: objSelector,
        callbacks: [cbDo, cbIfMissedDo]
    });

    initObjectPicking(function(intersects, event) {

        var isPicked = false;

        var maxIntersects = xRay ? intersects.length : Math.min(1, intersects.length);

        for (var i = 0; i < maxIntersects; i++) {
            var obj = intersects[i].object;
            var objName = getPickedObjectName(obj);
            var objNames = retrieveObjectNames(objSelector);

            if (objectsIncludeObj(objNames, objName)) {
                // save the object for the pickedObject block
                _pGlob.pickedObject = objName;
                isPicked = true;
                cbDo(event);
            }
        }

        if (!isPicked) {
            _pGlob.pickedObject = '';
            cbIfMissedDo(event);
        }

    }, doubleClick ? 'dblclick' : 'mousedown', false, mouseButtons);
}

// dof puzzle
function dof(focus, aperture, maxblur, depthLeakThreshold) {
    appInstance.enablePostprocessing([{
        type: 'dof',
        focus: focus,
        aperture: aperture,
        maxblur: maxblur,
        depthLeakThreshold: depthLeakThreshold
    }]);
}

// bloom puzzle
function bloom(threshold, strength, radius) {
    appInstance.enablePostprocessing([{
        type: 'bloom',
        threshold: threshold,
        strength: strength,
        radius: radius
    }]);
}

// playSound puzzle
function playSound(mediaElem, loop) {
    const mediaElems = (Array.isArray(mediaElem) ? mediaElem : [mediaElem]).filter(elem => elem);
    mediaElems.forEach(mediaElem => {
        mediaElem.setLoop(loop);
        mediaElem.play();
    });
}

// setTimer puzzle
function registerSetTimer(id, timeout, callback, repeat) {

    if (id in _pGlob.intervalTimers) {
        window.clearInterval(_pGlob.intervalTimers[id]);
    }

    _pGlob.intervalTimers[id] = window.setInterval(function() {
        if (repeat-- > 0) {
            callback(_pGlob.intervalTimers[id]);
        }
    }, 1000 * timeout);
}

// Describe this function...
function ocultar_sensor() {
  if (sensor_activo == 1) {
    animacion_area = 'sensor_chancado_primario_2600';
    area_seleccionada = 'area_2600_poligon';
    texto_area = 'text_chancado_primario_2600';
    sensor_area = 'sensor_chancado_primario_2600';
  } else if (sensor_activo == 2) {
    animacion_area = 'sensor_sistema_de_recuperacion';
    area_seleccionada = 'Area_sistema_de_recuperacion';
    texto_area = 'text_sistema_de_recuperacion';
    sensor_area = 'sensor_sistema_de_recuperacion';
  } else if (sensor_activo == 3) {
    animacion_area = 'laser_3300';
    area_seleccionada = 'area_3300';
    texto_area = 'area_3300_text';
    sensor_area = 'laser_3300';
  } else if (sensor_activo == 4) {
    animacion_area = 'laser_3400';
    area_seleccionada = 'area_3400';
    texto_area = 'area_3400_text';
    sensor_area = 'laser_3400';
  } else if (sensor_activo == 6) {
    animacion_area = 'laser_3600';
    area_seleccionada = 'area_3600';
    texto_area = 'Area_3600_text';
    sensor_area = 'laser_3600';
  } else if (sensor_activo == 7) {
    animacion_area = 'laser_3700';
    area_seleccionada = 'area_3700';
    texto_area = 'Area_3700_text';
    sensor_area = 'laser_3700';
  }
  changeVis(texto_area, false);
  outline(area_seleccionada, 'DISABLE');

  operateAnimation('PLAY', animacion_area, 1, 60, 'LoopOnce', 5,
          function() {
    changeVis(sensor_area, false);
  }, true);

      setHTMLElemStyle('border', '0px none rgb(10, 180, 255)', button_id, true);
}

// Describe this function...
function habilitarBotonesMenu() {
  setHTMLElemAttribute('style', 'pointer-events:initial;', '1000', true);
  setHTMLElemAttribute('style', 'pointer-events:initial;', '2600', true);
  setHTMLElemAttribute('style', 'pointer-events:initial;', '3100/3200', true);
  setHTMLElemAttribute('style', 'pointer-events:initial;', '3300', true);
  setHTMLElemAttribute('style', 'pointer-events:initial;', '4000', true);
  setHTMLElemAttribute('style', 'pointer-events:initial;', '5000', true);
}


if (featureAvailable('MOBILE') == true) {
  setHTMLElemStyle('display', 'flex', 'instruccionesmovil-button', false);
  eventHTMLElem('click', 'instruccionesmovil-button', false, function(event) {
    setHTMLElemStyle('display', 'flex', 'intrucciones-movil', false);
  });
  if (getHTMLElemAttribute('offsetHeight', 'v3d-container', false) / getHTMLElemAttribute('offsetWidth', 'v3d-container', false) < 1) {
    setHTMLElemStyle('display', 'none', 'horizontalContainer', true);
  } else if (getHTMLElemAttribute('offsetHeight', 'v3d-container', false) / getHTMLElemAttribute('offsetWidth', 'v3d-container', false) >= 1) {
    setHTMLElemStyle('display', 'flex', 'horizontalContainer', true);
  }
} else {
  setHTMLElemStyle('display', 'none', 'horizontalContainer', false);
  setHTMLElemStyle('display', 'flex', 'instrucciones-button', false);
  eventHTMLElem('click', 'instrucciones-button', false, function(event) {
    setHTMLElemStyle('display', 'flex', 'intrucciones-container', false);
  });
}

eventHTMLElem('click', 'btn_mute_audio', false, function(event) {
  setHTMLElemStyle('display', 'none', 'btn_mute_audio', false);
  setHTMLElemStyle('display', 'flex', 'btn_unmute_audio', false);
  soundVideoMute(loadMedia_HTML5('../audios/bienvenido-completo.mp3'));
});
eventHTMLElem('click', 'btn_unmute_audio', false, function(event) {
  setHTMLElemStyle('display', 'none', 'btn_unmute_audio', false);
  setHTMLElemStyle('display', 'flex', 'btn_mute_audio', false);
  soundVideoUnmute(loadMedia_HTML5('../audios/bienvenido-completo.mp3'));
});
eventHTMLElem('click', 'btn_empezar_recorrido_0', true, function(event) {
  setHTMLElemStyle('display', 'none', 'btn_empezar_recorrido_0', true);
  setHTMLElemStyle('display', 'flex', 'btn_mute_audio', false);
});

eventHTMLElem('mouseover', '3100/3200', true, function(event) {
  outline('Area_sistema_de_recuperacion', 'ENABLE');
});
eventHTMLElem('mouseleave', '3100/3200', true, function(event) {
  outline('Area_sistema_de_recuperacion', 'DISABLE');
});
registerOnHover('Area_sistema_de_recuperacion', false, function() {
  outline('Area_sistema_de_recuperacion', 'ENABLE');
}, function() {
  outline('Area_sistema_de_recuperacion', 'DISABLE');
});
registerOnClick('Area_sistema_de_recuperacion', false, false, [0,1,2], function() {
  if (sensor_activo == 2) {
    if (sena_3200 == false) {
      changeVis('sensor_sistema_de_recuperacion', true);
      outline('Area_sistema_de_recuperacion', 'ENABLE');
      console.log('molino animando!');

      operateAnimation('PLAY', 'sensor_sistema_de_recuperacion', 1, 60, 'LoopOnce', 0.03,
              function() {
        sensor_activo = 2;
        changeVis('text_sistema_de_recuperacion', true);
        sena_in = false;
        sena_3200 = true;
        button_id = '3100/3200';
        setHTMLElemStyle('border', '1px solid rgb(10, 180, 255)', '3100/3200', true);
      }, false);

          } else {
      ocultar_sensor();
      sena_3200 = false;
    }
  } else {
    sena_3200 = false;
    ocultar_sensor();
    changeVis('sensor_sistema_de_recuperacion', true);
    outline('Area_sistema_de_recuperacion', 'ENABLE');
    console.log('molino animando!');

    operateAnimation('PLAY', 'sensor_sistema_de_recuperacion', 1, 60, 'LoopOnce', 0.03,
            function() {
      sensor_activo = 2;
      changeVis('text_sistema_de_recuperacion', true);
      sena_in = false;
      sena_3200 = true;
      button_id = '3100/3200';
      setHTMLElemStyle('border', '1px solid rgb(10, 180, 255)', '3100/3200', true);
    }, false);

        }
}, function() {});

dof(47.8, 10, 0.002, 0.1);
bloom(0.7, 0.2, 0.5);

eventHTMLElem('click', 'btn_empezar_recorrido_0', true, function(event) {
  setHTMLElemStyle('display', 'none', 'btn_empezar_recorrido_0', true);
  registerSetTimer('myTimer', 0.2, function() {
    setHTMLElemStyle('display', 'flex', 'btn_mute_audio', false);
    soundVideoUnmute(loadMedia_HTML5('../audios/bienvenido.mp3'));
    soundVideoUnmute(loadMedia_HTML5('../audios/bienvenido-2.mp3'));
    soundVideoUnmute(loadMedia_HTML5('../audios/bienvenido-completo.mp3'));
    setHTMLElemStyle('display', 'flex', 'invisibleContainer', false);
    inhabilitarBotonesMenu();
    playSound(loadMedia_HTML5('../audios/bienvenido-completo.mp3'), false);
    registerSetTimer('myTimer2', 7, function() {
      /* 1000 */
      registerSetTimer('myTimer3', 1.5, function() {
        /* 2000 */
        outline('area_2600_poligon', 'ENABLE');
        console.log('2600');
        registerSetTimer('myTimer4', 1.5, function() {
          /* 3000 */
          outline('area_2600_poligon', 'DISABLE');
          outline('Area_sistema_de_recuperacion', 'ENABLE');
          console.log('area');
          registerSetTimer('myTimer5', 2, function() {
            /* 3300 */
            outline('Area_sistema_de_recuperacion', 'DISABLE');
            outline('area_3300', 'ENABLE');
            console.log('3300');
            registerSetTimer('myTimer6', 2, function() {
              /* 4000 */
              outline('area_3300', 'DISABLE');
              console.log('3700');
              registerSetTimer('myTimer7', 1, function() {
                outline('area_3700', 'DISABLE');
                /* 5000 */
              }, 1);
            }, 1);
          }, 1);
        }, 1);
      }, 1);
    }, 1);
    registerSetTimer('myTimer8', 26, function() {
      setHTMLElemStyle('display', 'none', 'invisibleContainer', false);
      setHTMLElemStyle('border', '4px solid rgb(10,180,255)', '1000', true);
      habilitarBotonesMenu();
      setHTMLElemStyle('display', 'none', 'btn_unmute_audio', false);
      setHTMLElemStyle('display', 'none', 'btn_mute_audio', false);
    }, 1);
  }, 1);
});

eventHTMLElem('mouseover', '2600', true, function(event) {
  outline('area_2600_poligon', 'ENABLE');
});
eventHTMLElem('mouseleave', '2600', true, function(event) {
  outline('area_2600_poligon', 'DISABLE');
});
registerOnHover('area_2600_poligon', false, function() {
  outline('area_2600_poligon', 'ENABLE');
}, function() {
  outline('area_2600_poligon', 'DISABLE');
});
registerOnClick('area_2600_poligon', false, false, [0,1,2], function() {
  if (sensor_activo == 1) {
    if (sena_3200 == false) {
      changeVis('sensor_chancado_primario_2600', true);
      outline('area_2600_poligon', 'ENABLE');

      operateAnimation('PLAY', 'sensor_chancado_primario_2600', 1, 60, 'LoopOnce', 5,
              function() {
        sensor_activo = 1;
        changeVis('text_chancado_primario_2600', true);
        sena_in = false;
        sena_3200 = true;
        setHTMLElemStyle('border', '1px solid rgb(10, 180, 255)', '2600', true);
        button_id = '2600';
      }, false);

          } else {
      ocultar_sensor();
      sena_3200 = false;
    }
  } else {
    sena_3200 = false;
    ocultar_sensor();
    changeVis('sensor_chancado_primario_2600', true);
    outline('area_2600_poligon', 'ENABLE');

    operateAnimation('PLAY', 'sensor_chancado_primario_2600', 1, 60, 'LoopOnce', 5,
            function() {
      sensor_activo = 1;
      changeVis('text_chancado_primario_2600', true);
      sena_in = false;
      sena_3200 = true;
      button_id = '2600';
      setHTMLElemStyle('border', '1px solid rgb(10, 180, 255)', '2600', true);
    }, false);

        }
}, function() {});

sena_3200 = false;
sensor_activo = 0;
changeVis('sensor_area_3200', false);
changeVis('sensor_area_3100', false);
changeVis('sensor_pebbles', false);
changeVis('sensor_chancado_primario_2600', false);
changeVis('sena_area_3100', false);
changeVis('sena_area_3200', false);
changeVis('sena_pebbles', false);
changeVis('text_area_3100', false);
changeVis('text_area_3200', false);
changeVis('text_pebbles', false);
changeVis('sensor_sistema_de_recuperacion', false);
changeVis('text_sistema_de_recuperacion', false);
changeVis('text_chancado_primario_2600', false);
changeVis('area_3300_text', false);
changeVis('area_3400_text', false);
changeVis('Area_3600_text', false);
changeVis('Area_3700_text', false);

eventHTMLElem('mouseover', '3500-3300', true, function(event) {
  outline('area_3300', 'ENABLE');
});
eventHTMLElem('mouseleave', '3500-3300', true, function(event) {
  outline('area_3300', 'DISABLE');
});
eventHTMLElem('mouseover', '3300', true, function(event) {
  outline('area_3300', 'ENABLE');
});
eventHTMLElem('mouseleave', '3300', true, function(event) {
  outline('area_3300', 'DISABLE');
});
registerOnHover('area_3300', false, function() {
  outline('area_3300', 'ENABLE');
}, function() {
  outline('area_3300', 'DISABLE');
});
registerOnClick('area_3300', false, false, [0,1,2], function() {
  if (sensor_activo == 3) {
    if (sena_3200 == false) {
      changeVis('laser_3300', true);
      outline('area_3300', 'ENABLE');

      operateAnimation('PLAY', 'laser_3300', 1, 60, 'LoopOnce', 5,
              function() {
        sensor_activo = 3;
        changeVis('area_3300_text', true);
        sena_in = false;
        sena_3200 = true;
        button_id = ['3300', '3900-3300', '3500-3300'];
        setHTMLElemStyle('border', '1px solid rgb(10, 180, 255)', '3300', true);
        setHTMLElemStyle('border', '1px solid rgb(10, 180, 255)', '3500-3300', true);
        setHTMLElemStyle('border', '1px solid rgb(10, 180, 255)', '3900-3300', true);
      }, false);

          } else {
      ocultar_sensor();
      sena_3200 = false;
    }
  } else {
    sena_3200 = false;
    ocultar_sensor();
    changeVis('laser_3300', true);
    outline('area_3300', 'ENABLE');

    operateAnimation('PLAY', 'laser_3300', 1, 60, 'LoopOnce', 5,
            function() {
      sensor_activo = 3;
      changeVis('area_3300_text', true);
      sena_in = false;
      sena_3200 = true;
      button_id = ['3300', '3900-3300', '3500-3300'];
      setHTMLElemStyle('border', '1px solid rgb(10, 180, 255)', '3300', true);
      setHTMLElemStyle('border', '1px solid rgb(10, 180, 255)', '3500-3300', true);
      setHTMLElemStyle('border', '1px solid rgb(10, 180, 255)', '3900-3300', true);
    }, false);

        }
}, function() {});

eventHTMLElem('mouseover', '3900-3300', true, function(event) {
  outline('area_3300', 'ENABLE');
});
eventHTMLElem('mouseleave', '3900-3300', true, function(event) {
  outline('area_3300', 'DISABLE');
});

eventHTMLElem('mouseover', '3500-3400', true, function(event) {
  outline('area_3400', 'ENABLE');
});
eventHTMLElem('mouseleave', '3500-3400', true, function(event) {
  outline('area_3400', 'DISABLE');
});
eventHTMLElem('mouseover', '3400', true, function(event) {
  outline('area_3400', 'ENABLE');
});
eventHTMLElem('mouseleave', '3400', true, function(event) {
  outline('area_3400', 'DISABLE');
});

eventHTMLElem('mouseover', '3900-3700', true, function(event) {
  outline('area_3700', 'ENABLE');
});
eventHTMLElem('mouseleave', '3900-3700', true, function(event) {
  outline('area_3700', 'DISABLE');
});
eventHTMLElem('mouseover', '3700', true, function(event) {
  outline('area_3700', 'ENABLE');
});
eventHTMLElem('mouseleave', '3700', true, function(event) {
  outline('area_3700', 'DISABLE');
});

eventHTMLElem('mouseover', '3500-3700', true, function(event) {
  outline('area_3700', 'ENABLE');
});
eventHTMLElem('mouseleave', '3500-3700', true, function(event) {
  outline('area_3700', 'DISABLE');
});

eventHTMLElem('mouseover', '3600', true, function(event) {
  outline('area_3600', 'ENABLE');
});
eventHTMLElem('mouseleave', '3600', true, function(event) {
  outline('area_3600', 'DISABLE');
});



} // end of PL.init function

PL.disposeListeners = function() {
    if (_pGlob) {
        _pGlob.eventListeners.forEach(({ target, type, listener, optionsOrUseCapture }) => {
            target.removeEventListener(type, listener, optionsOrUseCapture);
        });
        _pGlob.eventListeners.length = 0;
    }
}

PL.dispose = function() {
    PL.disposeListeners();
    _pGlob = null;
    // backward compatibility
    if (v3d[Symbol.toStringTag] !== 'Module') {
        delete v3d.PL;
        delete v3d.puzzles;
    }
}



return PL;

}

export { createPL };
